["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/dom/safe.js"],"~:js","goog.provide(\"goog.dom.safe\");\ngoog.provide(\"goog.dom.safe.InsertAdjacentHtmlPosition\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.dom.asserts\");\ngoog.require(\"goog.functions\");\ngoog.require(\"goog.html.SafeHtml\");\ngoog.require(\"goog.html.SafeScript\");\ngoog.require(\"goog.html.SafeStyle\");\ngoog.require(\"goog.html.SafeUrl\");\ngoog.require(\"goog.html.TrustedResourceUrl\");\ngoog.require(\"goog.html.uncheckedconversions\");\ngoog.require(\"goog.string.Const\");\ngoog.require(\"goog.string.internal\");\ngoog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:\"afterbegin\", AFTEREND:\"afterend\", BEFOREBEGIN:\"beforebegin\", BEFOREEND:\"beforeend\"};\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\"MATH\":true, \"SCRIPT\":true, \"STYLE\":true, \"SVG\":true, \"TEMPLATE\":true};\ngoog.dom.safe.isInnerHtmlCleanupRecursive_ = goog.functions.cacheReturnValue(function() {\n  if (goog.DEBUG && typeof document === \"undefined\") {\n    return false;\n  }\n  var div = document.createElement(\"div\");\n  var childDiv = document.createElement(\"div\");\n  childDiv.appendChild(document.createElement(\"div\"));\n  div.appendChild(childDiv);\n  if (goog.DEBUG && !div.firstChild) {\n    return false;\n  }\n  var innerChild = div.firstChild.firstChild;\n  div.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);\n  return !innerChild.parentElement;\n});\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(elem, html) {\n  if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) {\n    while (elem.lastChild) {\n      elem.removeChild(elem.lastChild);\n    }\n  }\n  elem.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\ngoog.dom.safe.setInnerHtml = function(elem, html) {\n  if (goog.asserts.ENABLE_ASSERTS && elem.tagName) {\n    var tagName = elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw new Error(\"goog.dom.safe.setInnerHtml cannot be used to set content of \" + elem.tagName + \".\");\n    }\n  }\n  goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(elem, html);\n};\ngoog.dom.safe.setInnerHtmlFromConstant = function(element, constHtml) {\n  goog.dom.safe.setInnerHtml(element, goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Constant HTML to be immediatelly used.\"), goog.string.Const.unwrap(constHtml)));\n};\ngoog.dom.safe.setOuterHtml = function(elem, html) {\n  elem.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\ngoog.dom.safe.setFormElementAction = function(form, url) {\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLFormElement(form).action = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setButtonFormAction = function(button, url) {\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setInputFormAction = function(input, url) {\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLInputElement(input).formAction = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setStyle = function(elem, style) {\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\n};\ngoog.dom.safe.documentWrite = function(doc, html) {\n  doc.write(goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:image\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setAudioSrc = function(audioElement, url) {\n  goog.dom.asserts.assertIsHTMLAudioElement(audioElement);\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:audio\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  audioElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setVideoSrc = function(videoElement, url) {\n  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:video\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n};\ngoog.dom.safe.setFrameSrc = function(frame, url) {\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel = rel;\n  if (goog.string.internal.caseInsensitiveContains(rel, \"stylesheet\")) {\n    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"');\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else {\n    if (url instanceof goog.html.TrustedResourceUrl) {\n      link.href = goog.html.TrustedResourceUrl.unwrap(url);\n    } else {\n      if (url instanceof goog.html.SafeUrl) {\n        link.href = goog.html.SafeUrl.unwrap(url);\n      } else {\n        link.href = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(url));\n      }\n    }\n  }\n};\ngoog.dom.safe.setObjectData = function(object, url) {\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n};\ngoog.dom.safe.setScriptSrc = function(script, url) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n  goog.dom.safe.setNonceForScriptElement_(script);\n};\ngoog.dom.safe.setScriptContent = function(script, content) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.textContent = goog.html.SafeScript.unwrapTrustedScript(content);\n  goog.dom.safe.setNonceForScriptElement_(script);\n};\ngoog.dom.safe.setNonceForScriptElement_ = function(script) {\n  var win = script.ownerDocument && script.ownerDocument.defaultView;\n  var nonce = goog.getScriptNonce(win);\n  if (nonce) {\n    script.setAttribute(\"nonce\", nonce);\n  }\n};\ngoog.dom.safe.setLocationHref = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\ngoog.dom.safe.assignLocation = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.assign(goog.html.SafeUrl.unwrap(safeUrl));\n};\ngoog.dom.safe.replaceLocation = function(loc, url) {\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));\n};\ngoog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win = opt_openerWin || goog.global;\n  var name = opt_name instanceof goog.string.Const ? goog.string.Const.unwrap(opt_name) : opt_name || \"\";\n  if (opt_specs !== undefined || opt_replace !== undefined) {\n    return win.open(goog.html.SafeUrl.unwrap(safeUrl), name, opt_specs, opt_replace);\n  } else {\n    return win.open(goog.html.SafeUrl.unwrap(safeUrl), name);\n  }\n};\ngoog.dom.safe.parseFromStringHtml = function(parser, html) {\n  return goog.dom.safe.parseFromString(parser, html, \"text/html\");\n};\ngoog.dom.safe.parseFromString = function(parser, content, type) {\n  return parser.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(content), type);\n};\ngoog.dom.safe.createImageFromBlob = function(blob) {\n  if (!/^image\\/.*/g.test(blob.type)) {\n    throw new Error(\"goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.\");\n  }\n  var objectUrl = goog.global.URL.createObjectURL(blob);\n  var image = new goog.global.Image;\n  image.onload = function() {\n    goog.global.URL.revokeObjectURL(objectUrl);\n  };\n  goog.dom.safe.setImageSrc(image, goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Image blob URL.\"), objectUrl));\n  return image;\n};\ngoog.dom.safe.createContextualFragment = function(range, html) {\n  return range.createContextualFragment(goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\n *\n * This file provides type-safe wrappers for DOM APIs that can result in\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\n * safe wrappers consume values of types from the goog.html package whose\n * contract promises that values are safe to use in the corresponding context.\n *\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\n * only reference to security-sensitive raw DOM APIs are in this file) is\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\n * correctness of code that produces values of the respective goog.html types,\n * and absent code that violates type safety).\n *\n * For example, assigning to an element's .innerHTML property a string that is\n * derived (even partially) from untrusted input typically results in an XSS\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\n * value of type goog.html.SafeHtml, whose contract states that using its values\n * in a HTML context will not result in XSS. Hence a program that is free of\n * direct assignments to any element's innerHTML property (with the exception of\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\n * due to assignment of untrusted strings to the innerHTML property.\n */\n\ngoog.provide('goog.dom.safe');\ngoog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');\n\ngoog.require('goog.asserts');\ngoog.require('goog.dom.asserts');\ngoog.require('goog.functions');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeScript');\ngoog.require('goog.html.SafeStyle');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\n\n\n/** @enum {string} */\ngoog.dom.safe.InsertAdjacentHtmlPosition = {\n  AFTERBEGIN: 'afterbegin',\n  AFTEREND: 'afterend',\n  BEFOREBEGIN: 'beforebegin',\n  BEFOREEND: 'beforeend'\n};\n\n\n/**\n * Inserts known-safe HTML into a Node, at the specified position.\n * @param {!Node} node The node on which to call insertAdjacentHTML.\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\n *     to insert the HTML.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\n */\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\n  'use strict';\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n\n\n/**\n * Tags not allowed in goog.dom.safe.setInnerHtml.\n * @private @const {!Object<string, boolean>}\n */\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\n  'MATH': true,\n  'SCRIPT': true,\n  'STYLE': true,\n  'SVG': true,\n  'TEMPLATE': true\n};\n\n\n/**\n * Whether assigning to innerHTML results in a non-spec-compliant clean-up. Used\n * to define goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse.\n *\n * <p>As mentioned in https://stackoverflow.com/questions/28741528, re-rendering\n * an element in IE by setting innerHTML causes IE to recursively disconnect all\n * parent/children connections that were in the previous contents of the\n * element. Unfortunately, this can unexpectedly result in confusing cases where\n * a function is run (typically asynchronously) on element that has since\n * disconnected from the DOM but assumes the presence of its children. A simple\n * workaround is to remove all children first. Testing on IE11 via\n * https://jsperf.com/innerhtml-vs-removechild/239, removeChild seems to be\n * ~10x faster than innerHTML='' for a large number of children (perhaps due\n * to the latter's recursive behavior), implying that this workaround would\n * not hurt performance and might actually improve it.\n * @return {boolean}\n * @private\n */\ngoog.dom.safe.isInnerHtmlCleanupRecursive_ =\n    goog.functions.cacheReturnValue(function() {\n      'use strict';\n      // `document` missing in some test frameworks.\n      if (goog.DEBUG && typeof document === 'undefined') {\n        return false;\n      }\n      // Create 3 nested <div>s without using innerHTML.\n      // We're not chaining the appendChilds in one call,  as this breaks\n      // in a DocumentFragment.\n      var div = document.createElement('div');\n      var childDiv = document.createElement('div');\n      childDiv.appendChild(document.createElement('div'));\n      div.appendChild(childDiv);\n      // `firstChild` is null in Google Js Test.\n      if (goog.DEBUG && !div.firstChild) {\n        return false;\n      }\n      var innerChild = div.firstChild.firstChild;\n      div.innerHTML =\n          goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);\n      return !innerChild.parentElement;\n    });\n\n\n/**\n * Assigns HTML to an element's innerHTML property. Helper to use only here and\n * in soy.js.\n * @param {?Element|?ShadowRoot} elem The element whose innerHTML is to be\n *     assigned to.\n * @param {!goog.html.SafeHtml} html\n */\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(elem, html) {\n  'use strict';\n  // See comment above goog.dom.safe.isInnerHtmlCleanupRecursive_.\n  if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) {\n    while (elem.lastChild) {\n      elem.removeChild(elem.lastChild);\n    }\n  }\n  elem.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\n\n\n/**\n * Assigns known-safe HTML to an element's innerHTML property.\n * @param {!Element|!ShadowRoot} elem The element whose innerHTML is to be\n *     assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n * @throws {Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtml = function(elem, html) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && elem.tagName) {\n    var tagName = elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw new Error(\n          'goog.dom.safe.setInnerHtml cannot be used to set content of ' +\n          elem.tagName + '.');\n    }\n  }\n\n  goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(elem, html);\n};\n\n\n/**\n * Assigns constant HTML to an element's innerHTML property.\n * @param {!Element} element The element whose innerHTML is to be assigned to.\n * @param {!goog.string.Const} constHtml The known-safe HTML to assign.\n * @throws {!Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtmlFromConstant = function(element, constHtml) {\n  'use strict';\n  goog.dom.safe.setInnerHtml(\n      element,\n      goog.html.uncheckedconversions\n          .safeHtmlFromStringKnownToSatisfyTypeContract(\n              goog.string.Const.from('Constant HTML to be immediatelly used.'),\n              goog.string.Const.unwrap(constHtml)));\n};\n\n\n/**\n * Assigns known-safe HTML to an element's outerHTML property.\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.setOuterHtml = function(elem, html) {\n  'use strict';\n  elem.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\n\n\n/**\n * Safely assigns a URL a form element's action property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * form's action property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setFormElementAction(formEl, url);\n * which is a safe alternative to\n *   formEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} form The form element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setFormElementAction = function(form, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLFormElement(form).action =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a button element's formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * button's formaction property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setButtonFormAction(buttonEl, url);\n * which is a safe alternative to\n *   buttonEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} button The button element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setButtonFormAction = function(button, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * Safely assigns a URL to an input element's formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * input's formaction property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setInputFormAction(inputEl, url);\n * which is a safe alternative to\n *   inputEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} input The input element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setInputFormAction = function(input, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLInputElement(input).formAction =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Sets the given element's style property to the contents of the provided\n * SafeStyle object.\n * @param {!Element} elem\n * @param {!goog.html.SafeStyle} style\n */\ngoog.dom.safe.setStyle = function(elem, style) {\n  'use strict';\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\n};\n\n\n/**\n * Writes known-safe HTML to a document.\n * @param {!Document} doc The document to be written to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.documentWrite = function(doc, html) {\n  'use strict';\n  doc.write(goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n\n\n/**\n * Safely assigns a URL to an anchor element's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\n * which is a safe alternative to\n *   anchorEl.href = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely assigns a URL to an image element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * image's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLImageElement} imageElement The image element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:image\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a audio element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * audio's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLAudioElement} audioElement The audio element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAudioSrc = function(audioElement, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLAudioElement(audioElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:audio\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  audioElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a video element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * video's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLVideoElement} videoElement The video element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setVideoSrc = function(videoElement, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:video\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to an embed element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\n * which is a safe alternative to\n *   embedEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLEmbedElement} embed The embed element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n};\n\n\n/**\n * Safely assigns a URL to a frame element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setFrameSrc(frameEl, url);\n * which is a safe alternative to\n *   frameEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLFrameElement} frame The frame element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setFrameSrc = function(frame, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to an iframe element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\n * which is a safe alternative to\n *   iframeEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns HTML to an iframe element's srcdoc property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\n * which is a safe alternative to\n *   iframeEl.srcdoc = html;\n * The latter can result in loading untrusted code.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\n *     is to be assigned to.\n * @param {!goog.html.SafeHtml} html The HTML to assign.\n */\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\n\n\n/**\n * Safely sets a link element's href and rel properties. Whether or not\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\n * depends on the value of the rel property. If rel contains \"stylesheet\"\n * then a TrustedResourceUrl is required.\n *\n * Example usage:\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');\n * which is a safe alternative to\n *   linkEl.rel = 'stylesheet';\n *   linkEl.href = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLLinkElement} link The link element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\n *     to assign to the href property. Must be a TrustedResourceUrl if the\n *     value assigned to rel contains \"stylesheet\". A string value is\n *     sanitized with goog.html.SafeUrl.sanitize.\n * @param {string} rel The value to assign to the rel property.\n * @throws {Error} if rel contains \"stylesheet\" and url is not a\n *     TrustedResourceUrl\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel = rel;\n  if (goog.string.internal.caseInsensitiveContains(rel, 'stylesheet')) {\n    goog.asserts.assert(\n        url instanceof goog.html.TrustedResourceUrl,\n        'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"');\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.SafeUrl) {\n    link.href = goog.html.SafeUrl.unwrap(url);\n  } else {  // string\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\n    link.href = goog.html.SafeUrl.unwrap(\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url));\n  }\n};\n\n\n/**\n * Safely assigns a URL to an object element's data property.\n *\n * Example usage:\n *   goog.dom.safe.setObjectData(objectEl, url);\n * which is a safe alternative to\n *   objectEl.data = url;\n * The latter can result in loading untrusted code unless setit is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLObjectElement} object The object element whose data property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setObjectData = function(object, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n};\n\n\n/**\n * Safely assigns a URL to a script element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\n * which is a safe alternative to\n *   scriptEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setScriptSrc = function(script, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n  goog.dom.safe.setNonceForScriptElement_(script);\n};\n\n\n/**\n * Safely assigns a value to a script element's content.\n *\n * Example usage:\n *   goog.dom.safe.setScriptContent(scriptEl, content);\n * which is a safe alternative to\n *   scriptEl.text = content;\n * The latter can result in executing untrusted code unless it is ensured that\n * the code is loaded from a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose content is being\n *     set.\n * @param {!goog.html.SafeScript} content The content to assign.\n */\ngoog.dom.safe.setScriptContent = function(script, content) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.textContent = goog.html.SafeScript.unwrapTrustedScript(content);\n  goog.dom.safe.setNonceForScriptElement_(script);\n};\n\n\n/**\n * Set nonce-based CSPs to dynamically created scripts.\n * @param {!HTMLScriptElement} script The script element whose nonce value\n *     is to be calculated\n * @private\n */\ngoog.dom.safe.setNonceForScriptElement_ = function(script) {\n  'use strict';\n  var win = script.ownerDocument && script.ownerDocument.defaultView;\n  var nonce = goog.getScriptNonce(win);\n  if (nonce) {\n    script.setAttribute('nonce', nonce);\n  }\n};\n\n\n/**\n * Safely assigns a URL to a Location object's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * loc's href property.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\n * which is a safe alternative to\n *   document.location.href = redirectUrl;\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object whose href property is to be\n *     assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLocationHref = function(loc, url) {\n  'use strict';\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#assign. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.assignLocation(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.assign(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * This has the same behaviour as setLocationHref, however some test\n * mock Location.assign instead of a property assignment.\n *\n * @param {!Location} loc The Location object which is to be assigned.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.assignLocation = function(loc, url) {\n  'use strict';\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.assign(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely replaces the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#replace. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.replaceLocation(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.replace(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object which is to be replaced.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.replaceLocation = function(loc, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely opens a URL in a new window (via window.open).\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\n * window.open.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Note that this function does not prevent leakages via the referer that is\n * sent by window.open. It is advised to only use this to open 1st party URLs.\n *\n * Example usage:\n *   goog.dom.safe.openInWindow(url);\n * which is a safe alternative to\n *   window.open(url);\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {string|!goog.html.SafeUrl} url The URL to open.\n * @param {Window=} opt_openerWin Window of which to call the .open() method.\n *     Defaults to the global window.\n * @param {!goog.string.Const|string=} opt_name Name of the window to open in.\n *     Can be _top, etc as allowed by window.open(). This accepts string for\n *     legacy reasons. Pass goog.string.Const if possible.\n * @param {string=} opt_specs Comma-separated list of specifications, same as\n *     in window.open().\n * @param {boolean=} opt_replace Whether to replace the current entry in browser\n *     history, same as in window.open().\n * @return {Window} Window the url was opened in.\n */\ngoog.dom.safe.openInWindow = function(\n    url, opt_openerWin, opt_name, opt_specs, opt_replace) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win = opt_openerWin || goog.global;\n  // If opt_name is undefined, simply passing that in to open() causes IE to\n  // reuse the current window instead of opening a new one. Thus we pass '' in\n  // instead, which according to spec opens a new window. See\n  // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\n  var name = opt_name instanceof goog.string.Const ?\n      goog.string.Const.unwrap(opt_name) :\n      opt_name || '';\n  // Do not pass opt_specs and opt_replace to window.open unless they were\n  // provided by the caller. IE11 will use it as a signal to open a new window\n  // rather than a new tab (even if they're undefined).\n  if (opt_specs !== undefined || opt_replace !== undefined) {\n    return win.open(\n        goog.html.SafeUrl.unwrap(safeUrl), name, opt_specs, opt_replace);\n  } else {\n    return win.open(goog.html.SafeUrl.unwrap(safeUrl), name);\n  }\n};\n\n\n/**\n * Parses the HTML as 'text/html'.\n * @param {!DOMParser} parser\n * @param {!goog.html.SafeHtml} html The HTML to be parsed.\n * @return {?Document}\n */\ngoog.dom.safe.parseFromStringHtml = function(parser, html) {\n  'use strict';\n  return goog.dom.safe.parseFromString(parser, html, 'text/html');\n};\n\n\n/**\n * Parses the string.\n * @param {!DOMParser} parser\n * @param {!goog.html.SafeHtml} content Note: We don't have a special type for\n *     XML od SVG supported by this function so we use SafeHtml.\n * @param {string} type\n * @return {?Document}\n */\ngoog.dom.safe.parseFromString = function(parser, content, type) {\n  'use strict';\n  return parser.parseFromString(\n      goog.html.SafeHtml.unwrapTrustedHTML(content), type);\n};\n\n\n/**\n * Safely creates an HTMLImageElement from a Blob.\n *\n * Example usage:\n *     goog.dom.safe.createImageFromBlob(blob);\n * which is a safe alternative to\n *     image.src = createObjectUrl(blob)\n * The latter can result in executing malicious same-origin scripts from a bad\n * Blob.\n * @param {!Blob} blob The blob to create the image from.\n * @return {!HTMLImageElement} The image element created from the blob.\n * @throws {!Error} If called with a Blob with a MIME type other than image/.*.\n */\ngoog.dom.safe.createImageFromBlob = function(blob) {\n  'use strict';\n  // Any image/* MIME type is accepted as safe.\n  if (!/^image\\/.*/g.test(blob.type)) {\n    throw new Error(\n        'goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.');\n  }\n  var objectUrl = goog.global.URL.createObjectURL(blob);\n  var image = new goog.global.Image();\n  image.onload = function() {\n    'use strict';\n    goog.global.URL.revokeObjectURL(objectUrl);\n  };\n  goog.dom.safe.setImageSrc(\n      image,\n      goog.html.uncheckedconversions\n          .safeUrlFromStringKnownToSatisfyTypeContract(\n              goog.string.Const.from('Image blob URL.'), objectUrl));\n  return image;\n};\n\n/**\n * Creates a DocumentFragment by parsing html in the context of a Range.\n * @param {!Range} range The Range object starting from the context node to\n * create a fragment in.\n * @param {!goog.html.SafeHtml} html HTML to create a fragment from.\n * @return {?DocumentFragment}\n */\ngoog.dom.safe.createContextualFragment = function(range, html) {\n  'use strict';\n  return range.createContextualFragment(\n      goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n","~:compiled-at",1623605884887,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.dom.safe.js\",\n\"lineCount\":253,\n\"mappings\":\"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\",\n\"sources\":[\"goog/dom/safe.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\\n *\\n * This file provides type-safe wrappers for DOM APIs that can result in\\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\\n * safe wrappers consume values of types from the goog.html package whose\\n * contract promises that values are safe to use in the corresponding context.\\n *\\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\\n * only reference to security-sensitive raw DOM APIs are in this file) is\\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\\n * correctness of code that produces values of the respective goog.html types,\\n * and absent code that violates type safety).\\n *\\n * For example, assigning to an element's .innerHTML property a string that is\\n * derived (even partially) from untrusted input typically results in an XSS\\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\\n * value of type goog.html.SafeHtml, whose contract states that using its values\\n * in a HTML context will not result in XSS. Hence a program that is free of\\n * direct assignments to any element's innerHTML property (with the exception of\\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\\n * due to assignment of untrusted strings to the innerHTML property.\\n */\\n\\ngoog.provide('goog.dom.safe');\\ngoog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');\\n\\ngoog.require('goog.asserts');\\ngoog.require('goog.dom.asserts');\\ngoog.require('goog.functions');\\ngoog.require('goog.html.SafeHtml');\\ngoog.require('goog.html.SafeScript');\\ngoog.require('goog.html.SafeStyle');\\ngoog.require('goog.html.SafeUrl');\\ngoog.require('goog.html.TrustedResourceUrl');\\ngoog.require('goog.html.uncheckedconversions');\\ngoog.require('goog.string.Const');\\ngoog.require('goog.string.internal');\\n\\n\\n/** @enum {string} */\\ngoog.dom.safe.InsertAdjacentHtmlPosition = {\\n  AFTERBEGIN: 'afterbegin',\\n  AFTEREND: 'afterend',\\n  BEFOREBEGIN: 'beforebegin',\\n  BEFOREEND: 'beforeend'\\n};\\n\\n\\n/**\\n * Inserts known-safe HTML into a Node, at the specified position.\\n * @param {!Node} node The node on which to call insertAdjacentHTML.\\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\\n *     to insert the HTML.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\\n */\\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\\n  'use strict';\\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrapTrustedHTML(html));\\n};\\n\\n\\n/**\\n * Tags not allowed in goog.dom.safe.setInnerHtml.\\n * @private @const {!Object<string, boolean>}\\n */\\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\\n  'MATH': true,\\n  'SCRIPT': true,\\n  'STYLE': true,\\n  'SVG': true,\\n  'TEMPLATE': true\\n};\\n\\n\\n/**\\n * Whether assigning to innerHTML results in a non-spec-compliant clean-up. Used\\n * to define goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse.\\n *\\n * <p>As mentioned in https://stackoverflow.com/questions/28741528, re-rendering\\n * an element in IE by setting innerHTML causes IE to recursively disconnect all\\n * parent/children connections that were in the previous contents of the\\n * element. Unfortunately, this can unexpectedly result in confusing cases where\\n * a function is run (typically asynchronously) on element that has since\\n * disconnected from the DOM but assumes the presence of its children. A simple\\n * workaround is to remove all children first. Testing on IE11 via\\n * https://jsperf.com/innerhtml-vs-removechild/239, removeChild seems to be\\n * ~10x faster than innerHTML='' for a large number of children (perhaps due\\n * to the latter's recursive behavior), implying that this workaround would\\n * not hurt performance and might actually improve it.\\n * @return {boolean}\\n * @private\\n */\\ngoog.dom.safe.isInnerHtmlCleanupRecursive_ =\\n    goog.functions.cacheReturnValue(function() {\\n      'use strict';\\n      // `document` missing in some test frameworks.\\n      if (goog.DEBUG && typeof document === 'undefined') {\\n        return false;\\n      }\\n      // Create 3 nested <div>s without using innerHTML.\\n      // We're not chaining the appendChilds in one call,  as this breaks\\n      // in a DocumentFragment.\\n      var div = document.createElement('div');\\n      var childDiv = document.createElement('div');\\n      childDiv.appendChild(document.createElement('div'));\\n      div.appendChild(childDiv);\\n      // `firstChild` is null in Google Js Test.\\n      if (goog.DEBUG && !div.firstChild) {\\n        return false;\\n      }\\n      var innerChild = div.firstChild.firstChild;\\n      div.innerHTML =\\n          goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);\\n      return !innerChild.parentElement;\\n    });\\n\\n\\n/**\\n * Assigns HTML to an element's innerHTML property. Helper to use only here and\\n * in soy.js.\\n * @param {?Element|?ShadowRoot} elem The element whose innerHTML is to be\\n *     assigned to.\\n * @param {!goog.html.SafeHtml} html\\n */\\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(elem, html) {\\n  'use strict';\\n  // See comment above goog.dom.safe.isInnerHtmlCleanupRecursive_.\\n  if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) {\\n    while (elem.lastChild) {\\n      elem.removeChild(elem.lastChild);\\n    }\\n  }\\n  elem.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\\n};\\n\\n\\n/**\\n * Assigns known-safe HTML to an element's innerHTML property.\\n * @param {!Element|!ShadowRoot} elem The element whose innerHTML is to be\\n *     assigned to.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\\n * @throws {Error} If called with one of these tags: math, script, style, svg,\\n *     template.\\n */\\ngoog.dom.safe.setInnerHtml = function(elem, html) {\\n  'use strict';\\n  if (goog.asserts.ENABLE_ASSERTS && elem.tagName) {\\n    var tagName = elem.tagName.toUpperCase();\\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\\n      throw new Error(\\n          'goog.dom.safe.setInnerHtml cannot be used to set content of ' +\\n          elem.tagName + '.');\\n    }\\n  }\\n\\n  goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(elem, html);\\n};\\n\\n\\n/**\\n * Assigns constant HTML to an element's innerHTML property.\\n * @param {!Element} element The element whose innerHTML is to be assigned to.\\n * @param {!goog.string.Const} constHtml The known-safe HTML to assign.\\n * @throws {!Error} If called with one of these tags: math, script, style, svg,\\n *     template.\\n */\\ngoog.dom.safe.setInnerHtmlFromConstant = function(element, constHtml) {\\n  'use strict';\\n  goog.dom.safe.setInnerHtml(\\n      element,\\n      goog.html.uncheckedconversions\\n          .safeHtmlFromStringKnownToSatisfyTypeContract(\\n              goog.string.Const.from('Constant HTML to be immediatelly used.'),\\n              goog.string.Const.unwrap(constHtml)));\\n};\\n\\n\\n/**\\n * Assigns known-safe HTML to an element's outerHTML property.\\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\\n */\\ngoog.dom.safe.setOuterHtml = function(elem, html) {\\n  'use strict';\\n  elem.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\\n};\\n\\n\\n/**\\n * Safely assigns a URL a form element's action property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * form's action property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setFormElementAction(formEl, url);\\n * which is a safe alternative to\\n *   formEl.action = url;\\n * The latter can result in XSS vulnerabilities if url is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!Element} form The form element whose action property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setFormElementAction = function(form, url) {\\n  'use strict';\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  goog.dom.asserts.assertIsHTMLFormElement(form).action =\\n      goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n/**\\n * Safely assigns a URL to a button element's formaction property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * button's formaction property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setButtonFormAction(buttonEl, url);\\n * which is a safe alternative to\\n *   buttonEl.action = url;\\n * The latter can result in XSS vulnerabilities if url is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!Element} button The button element whose action property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setButtonFormAction = function(button, url) {\\n  'use strict';\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction =\\n      goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n/**\\n * Safely assigns a URL to an input element's formaction property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * input's formaction property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setInputFormAction(inputEl, url);\\n * which is a safe alternative to\\n *   inputEl.action = url;\\n * The latter can result in XSS vulnerabilities if url is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!Element} input The input element whose action property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setInputFormAction = function(input, url) {\\n  'use strict';\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  goog.dom.asserts.assertIsHTMLInputElement(input).formAction =\\n      goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n/**\\n * Sets the given element's style property to the contents of the provided\\n * SafeStyle object.\\n * @param {!Element} elem\\n * @param {!goog.html.SafeStyle} style\\n */\\ngoog.dom.safe.setStyle = function(elem, style) {\\n  'use strict';\\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\\n};\\n\\n\\n/**\\n * Writes known-safe HTML to a document.\\n * @param {!Document} doc The document to be written to.\\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\\n */\\ngoog.dom.safe.documentWrite = function(doc, html) {\\n  'use strict';\\n  doc.write(goog.html.SafeHtml.unwrapTrustedHTML(html));\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an anchor element's href property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * anchor's href property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\\n * which is a safe alternative to\\n *   anchorEl.href = url;\\n * The latter can result in XSS vulnerabilities if url is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an image element's src property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * image's src property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * @param {!HTMLImageElement} imageElement The image element whose src property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    var allowDataUrl = /^data:image\\\\//i.test(url);\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\\n  }\\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n/**\\n * Safely assigns a URL to a audio element's src property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * audio's src property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * @param {!HTMLAudioElement} audioElement The audio element whose src property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setAudioSrc = function(audioElement, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLAudioElement(audioElement);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    var allowDataUrl = /^data:audio\\\\//i.test(url);\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\\n  }\\n  audioElement.src = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n/**\\n * Safely assigns a URL to a video element's src property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * video's src property.  If url is of type string however, it is first\\n * sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * @param {!HTMLVideoElement} videoElement The video element whose src property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setVideoSrc = function(videoElement, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    var allowDataUrl = /^data:video\\\\//i.test(url);\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\\n  }\\n  videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n/**\\n * Safely assigns a URL to an embed element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\\n * which is a safe alternative to\\n *   embedEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLEmbedElement} embed The embed element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\\n  embed.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to a frame element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setFrameSrc(frameEl, url);\\n * which is a safe alternative to\\n *   frameEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLFrameElement} frame The frame element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setFrameSrc = function(frame, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an iframe element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\\n * which is a safe alternative to\\n *   iframeEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\\n};\\n\\n\\n/**\\n * Safely assigns HTML to an iframe element's srcdoc property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\\n * which is a safe alternative to\\n *   iframeEl.srcdoc = html;\\n * The latter can result in loading untrusted code.\\n *\\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\\n *     is to be assigned to.\\n * @param {!goog.html.SafeHtml} html The HTML to assign.\\n */\\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\\n  iframe.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(html);\\n};\\n\\n\\n/**\\n * Safely sets a link element's href and rel properties. Whether or not\\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\\n * depends on the value of the rel property. If rel contains \\\"stylesheet\\\"\\n * then a TrustedResourceUrl is required.\\n *\\n * Example usage:\\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');\\n * which is a safe alternative to\\n *   linkEl.rel = 'stylesheet';\\n *   linkEl.href = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLLinkElement} link The link element whose href property\\n *     is to be assigned to.\\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\\n *     to assign to the href property. Must be a TrustedResourceUrl if the\\n *     value assigned to rel contains \\\"stylesheet\\\". A string value is\\n *     sanitized with goog.html.SafeUrl.sanitize.\\n * @param {string} rel The value to assign to the rel property.\\n * @throws {Error} if rel contains \\\"stylesheet\\\" and url is not a\\n *     TrustedResourceUrl\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\\n  link.rel = rel;\\n  if (goog.string.internal.caseInsensitiveContains(rel, 'stylesheet')) {\\n    goog.asserts.assert(\\n        url instanceof goog.html.TrustedResourceUrl,\\n        'URL must be TrustedResourceUrl because \\\"rel\\\" contains \\\"stylesheet\\\"');\\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\\n  } else if (url instanceof goog.html.SafeUrl) {\\n    link.href = goog.html.SafeUrl.unwrap(url);\\n  } else {  // string\\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\\n    link.href = goog.html.SafeUrl.unwrap(\\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url));\\n  }\\n};\\n\\n\\n/**\\n * Safely assigns a URL to an object element's data property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setObjectData(objectEl, url);\\n * which is a safe alternative to\\n *   objectEl.data = url;\\n * The latter can result in loading untrusted code unless setit is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLObjectElement} object The object element whose data property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setObjectData = function(object, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\\n  object.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\\n};\\n\\n\\n/**\\n * Safely assigns a URL to a script element's src property.\\n *\\n * Example usage:\\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\\n * which is a safe alternative to\\n *   scriptEl.src = url;\\n * The latter can result in loading untrusted code unless it is ensured that\\n * the URL refers to a trustworthy resource.\\n *\\n * @param {!HTMLScriptElement} script The script element whose src property\\n *     is to be assigned to.\\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\\n */\\ngoog.dom.safe.setScriptSrc = function(script, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\\n  script.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\\n  goog.dom.safe.setNonceForScriptElement_(script);\\n};\\n\\n\\n/**\\n * Safely assigns a value to a script element's content.\\n *\\n * Example usage:\\n *   goog.dom.safe.setScriptContent(scriptEl, content);\\n * which is a safe alternative to\\n *   scriptEl.text = content;\\n * The latter can result in executing untrusted code unless it is ensured that\\n * the code is loaded from a trustworthy resource.\\n *\\n * @param {!HTMLScriptElement} script The script element whose content is being\\n *     set.\\n * @param {!goog.html.SafeScript} content The content to assign.\\n */\\ngoog.dom.safe.setScriptContent = function(script, content) {\\n  'use strict';\\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\\n  script.textContent = goog.html.SafeScript.unwrapTrustedScript(content);\\n  goog.dom.safe.setNonceForScriptElement_(script);\\n};\\n\\n\\n/**\\n * Set nonce-based CSPs to dynamically created scripts.\\n * @param {!HTMLScriptElement} script The script element whose nonce value\\n *     is to be calculated\\n * @private\\n */\\ngoog.dom.safe.setNonceForScriptElement_ = function(script) {\\n  'use strict';\\n  var win = script.ownerDocument && script.ownerDocument.defaultView;\\n  var nonce = goog.getScriptNonce(win);\\n  if (nonce) {\\n    script.setAttribute('nonce', nonce);\\n  }\\n};\\n\\n\\n/**\\n * Safely assigns a URL to a Location object's href property.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\\n * loc's href property.  If url is of type string however, it is first sanitized\\n * using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\\n * which is a safe alternative to\\n *   document.location.href = redirectUrl;\\n * The latter can result in XSS vulnerabilities if redirectUrl is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!Location} loc The Location object whose href property is to be\\n *     assigned to.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.setLocationHref = function(loc, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsLocation(loc);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\\n};\\n\\n/**\\n * Safely assigns the URL of a Location object.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\\n * passed to Location#assign. If url is of type string however, it is\\n * first sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.assignLocation(document.location, newUrl);\\n * which is a safe alternative to\\n *   document.location.assign(newUrl);\\n * The latter can result in XSS vulnerabilities if newUrl is a\\n * user-/attacker-controlled value.\\n *\\n * This has the same behaviour as setLocationHref, however some test\\n * mock Location.assign instead of a property assignment.\\n *\\n * @param {!Location} loc The Location object which is to be assigned.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.assignLocation = function(loc, url) {\\n  'use strict';\\n  goog.dom.asserts.assertIsLocation(loc);\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  loc.assign(goog.html.SafeUrl.unwrap(safeUrl));\\n};\\n\\n\\n/**\\n * Safely replaces the URL of a Location object.\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\\n * passed to Location#replace. If url is of type string however, it is\\n * first sanitized using goog.html.SafeUrl.sanitize.\\n *\\n * Example usage:\\n *   goog.dom.safe.replaceLocation(document.location, newUrl);\\n * which is a safe alternative to\\n *   document.location.replace(newUrl);\\n * The latter can result in XSS vulnerabilities if newUrl is a\\n * user-/attacker-controlled value.\\n *\\n * @param {!Location} loc The Location object which is to be replaced.\\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\\n * @see goog.html.SafeUrl#sanitize\\n */\\ngoog.dom.safe.replaceLocation = function(loc, url) {\\n  'use strict';\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));\\n};\\n\\n\\n/**\\n * Safely opens a URL in a new window (via window.open).\\n *\\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\\n * window.open.  If url is of type string however, it is first sanitized\\n * using goog.html.SafeUrl.sanitize.\\n *\\n * Note that this function does not prevent leakages via the referer that is\\n * sent by window.open. It is advised to only use this to open 1st party URLs.\\n *\\n * Example usage:\\n *   goog.dom.safe.openInWindow(url);\\n * which is a safe alternative to\\n *   window.open(url);\\n * The latter can result in XSS vulnerabilities if url is a\\n * user-/attacker-controlled value.\\n *\\n * @param {string|!goog.html.SafeUrl} url The URL to open.\\n * @param {Window=} opt_openerWin Window of which to call the .open() method.\\n *     Defaults to the global window.\\n * @param {!goog.string.Const|string=} opt_name Name of the window to open in.\\n *     Can be _top, etc as allowed by window.open(). This accepts string for\\n *     legacy reasons. Pass goog.string.Const if possible.\\n * @param {string=} opt_specs Comma-separated list of specifications, same as\\n *     in window.open().\\n * @param {boolean=} opt_replace Whether to replace the current entry in browser\\n *     history, same as in window.open().\\n * @return {Window} Window the url was opened in.\\n */\\ngoog.dom.safe.openInWindow = function(\\n    url, opt_openerWin, opt_name, opt_specs, opt_replace) {\\n  'use strict';\\n  /** @type {!goog.html.SafeUrl} */\\n  var safeUrl;\\n  if (url instanceof goog.html.SafeUrl) {\\n    safeUrl = url;\\n  } else {\\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\\n  }\\n  var win = opt_openerWin || goog.global;\\n  // If opt_name is undefined, simply passing that in to open() causes IE to\\n  // reuse the current window instead of opening a new one. Thus we pass '' in\\n  // instead, which according to spec opens a new window. See\\n  // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\\n  var name = opt_name instanceof goog.string.Const ?\\n      goog.string.Const.unwrap(opt_name) :\\n      opt_name || '';\\n  // Do not pass opt_specs and opt_replace to window.open unless they were\\n  // provided by the caller. IE11 will use it as a signal to open a new window\\n  // rather than a new tab (even if they're undefined).\\n  if (opt_specs !== undefined || opt_replace !== undefined) {\\n    return win.open(\\n        goog.html.SafeUrl.unwrap(safeUrl), name, opt_specs, opt_replace);\\n  } else {\\n    return win.open(goog.html.SafeUrl.unwrap(safeUrl), name);\\n  }\\n};\\n\\n\\n/**\\n * Parses the HTML as 'text/html'.\\n * @param {!DOMParser} parser\\n * @param {!goog.html.SafeHtml} html The HTML to be parsed.\\n * @return {?Document}\\n */\\ngoog.dom.safe.parseFromStringHtml = function(parser, html) {\\n  'use strict';\\n  return goog.dom.safe.parseFromString(parser, html, 'text/html');\\n};\\n\\n\\n/**\\n * Parses the string.\\n * @param {!DOMParser} parser\\n * @param {!goog.html.SafeHtml} content Note: We don't have a special type for\\n *     XML od SVG supported by this function so we use SafeHtml.\\n * @param {string} type\\n * @return {?Document}\\n */\\ngoog.dom.safe.parseFromString = function(parser, content, type) {\\n  'use strict';\\n  return parser.parseFromString(\\n      goog.html.SafeHtml.unwrapTrustedHTML(content), type);\\n};\\n\\n\\n/**\\n * Safely creates an HTMLImageElement from a Blob.\\n *\\n * Example usage:\\n *     goog.dom.safe.createImageFromBlob(blob);\\n * which is a safe alternative to\\n *     image.src = createObjectUrl(blob)\\n * The latter can result in executing malicious same-origin scripts from a bad\\n * Blob.\\n * @param {!Blob} blob The blob to create the image from.\\n * @return {!HTMLImageElement} The image element created from the blob.\\n * @throws {!Error} If called with a Blob with a MIME type other than image/.*.\\n */\\ngoog.dom.safe.createImageFromBlob = function(blob) {\\n  'use strict';\\n  // Any image/* MIME type is accepted as safe.\\n  if (!/^image\\\\/.*/g.test(blob.type)) {\\n    throw new Error(\\n        'goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.');\\n  }\\n  var objectUrl = goog.global.URL.createObjectURL(blob);\\n  var image = new goog.global.Image();\\n  image.onload = function() {\\n    'use strict';\\n    goog.global.URL.revokeObjectURL(objectUrl);\\n  };\\n  goog.dom.safe.setImageSrc(\\n      image,\\n      goog.html.uncheckedconversions\\n          .safeUrlFromStringKnownToSatisfyTypeContract(\\n              goog.string.Const.from('Image blob URL.'), objectUrl));\\n  return image;\\n};\\n\\n/**\\n * Creates a DocumentFragment by parsing html in the context of a Range.\\n * @param {!Range} range The Range object starting from the context node to\\n * create a fragment in.\\n * @param {!goog.html.SafeHtml} html HTML to create a fragment from.\\n * @return {?DocumentFragment}\\n */\\ngoog.dom.safe.createContextualFragment = function(range, html) {\\n  'use strict';\\n  return range.createContextualFragment(\\n      goog.html.SafeHtml.unwrapTrustedHTML(html));\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"dom\",\"safe\",\"InsertAdjacentHtmlPosition\",\"AFTERBEGIN\",\"AFTEREND\",\"BEFOREBEGIN\",\"BEFOREEND\",\"insertAdjacentHtml\",\"goog.dom.safe.insertAdjacentHtml\",\"node\",\"position\",\"html\",\"insertAdjacentHTML\",\"SafeHtml\",\"unwrapTrustedHTML\",\"SET_INNER_HTML_DISALLOWED_TAGS_\",\"isInnerHtmlCleanupRecursive_\",\"functions\",\"cacheReturnValue\",\"DEBUG\",\"document\",\"div\",\"createElement\",\"childDiv\",\"appendChild\",\"firstChild\",\"innerChild\",\"innerHTML\",\"EMPTY\",\"parentElement\",\"unsafeSetInnerHtmlDoNotUseOrElse\",\"goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse\",\"elem\",\"lastChild\",\"removeChild\",\"setInnerHtml\",\"goog.dom.safe.setInnerHtml\",\"asserts\",\"ENABLE_ASSERTS\",\"tagName\",\"toUpperCase\",\"Error\",\"setInnerHtmlFromConstant\",\"goog.dom.safe.setInnerHtmlFromConstant\",\"element\",\"constHtml\",\"uncheckedconversions\",\"safeHtmlFromStringKnownToSatisfyTypeContract\",\"string\",\"Const\",\"from\",\"unwrap\",\"setOuterHtml\",\"goog.dom.safe.setOuterHtml\",\"outerHTML\",\"setFormElementAction\",\"goog.dom.safe.setFormElementAction\",\"form\",\"url\",\"safeUrl\",\"SafeUrl\",\"sanitizeAssertUnchanged\",\"assertIsHTMLFormElement\",\"action\",\"setButtonFormAction\",\"goog.dom.safe.setButtonFormAction\",\"button\",\"assertIsHTMLButtonElement\",\"formAction\",\"setInputFormAction\",\"goog.dom.safe.setInputFormAction\",\"input\",\"assertIsHTMLInputElement\",\"setStyle\",\"goog.dom.safe.setStyle\",\"style\",\"cssText\",\"SafeStyle\",\"documentWrite\",\"goog.dom.safe.documentWrite\",\"doc\",\"write\",\"setAnchorHref\",\"goog.dom.safe.setAnchorHref\",\"anchor\",\"assertIsHTMLAnchorElement\",\"href\",\"setImageSrc\",\"goog.dom.safe.setImageSrc\",\"imageElement\",\"assertIsHTMLImageElement\",\"allowDataUrl\",\"test\",\"src\",\"setAudioSrc\",\"goog.dom.safe.setAudioSrc\",\"audioElement\",\"assertIsHTMLAudioElement\",\"setVideoSrc\",\"goog.dom.safe.setVideoSrc\",\"videoElement\",\"assertIsHTMLVideoElement\",\"setEmbedSrc\",\"goog.dom.safe.setEmbedSrc\",\"embed\",\"assertIsHTMLEmbedElement\",\"TrustedResourceUrl\",\"unwrapTrustedScriptURL\",\"setFrameSrc\",\"goog.dom.safe.setFrameSrc\",\"frame\",\"assertIsHTMLFrameElement\",\"setIframeSrc\",\"goog.dom.safe.setIframeSrc\",\"iframe\",\"assertIsHTMLIFrameElement\",\"setIframeSrcdoc\",\"goog.dom.safe.setIframeSrcdoc\",\"srcdoc\",\"setLinkHrefAndRel\",\"goog.dom.safe.setLinkHrefAndRel\",\"link\",\"rel\",\"assertIsHTMLLinkElement\",\"internal\",\"caseInsensitiveContains\",\"assert\",\"setObjectData\",\"goog.dom.safe.setObjectData\",\"object\",\"assertIsHTMLObjectElement\",\"data\",\"setScriptSrc\",\"goog.dom.safe.setScriptSrc\",\"script\",\"assertIsHTMLScriptElement\",\"setNonceForScriptElement_\",\"setScriptContent\",\"goog.dom.safe.setScriptContent\",\"content\",\"textContent\",\"SafeScript\",\"unwrapTrustedScript\",\"goog.dom.safe.setNonceForScriptElement_\",\"win\",\"ownerDocument\",\"defaultView\",\"nonce\",\"getScriptNonce\",\"setAttribute\",\"setLocationHref\",\"goog.dom.safe.setLocationHref\",\"loc\",\"assertIsLocation\",\"assignLocation\",\"goog.dom.safe.assignLocation\",\"assign\",\"replaceLocation\",\"goog.dom.safe.replaceLocation\",\"replace\",\"openInWindow\",\"goog.dom.safe.openInWindow\",\"opt_openerWin\",\"opt_name\",\"opt_specs\",\"opt_replace\",\"global\",\"name\",\"undefined\",\"open\",\"parseFromStringHtml\",\"goog.dom.safe.parseFromStringHtml\",\"parser\",\"parseFromString\",\"goog.dom.safe.parseFromString\",\"type\",\"createImageFromBlob\",\"goog.dom.safe.createImageFromBlob\",\"blob\",\"objectUrl\",\"URL\",\"createObjectURL\",\"image\",\"Image\",\"onload\",\"image.onload\",\"revokeObjectURL\",\"safeUrlFromStringKnownToSatisfyTypeContract\",\"createContextualFragment\",\"goog.dom.safe.createContextualFragment\",\"range\"]\n}\n"]