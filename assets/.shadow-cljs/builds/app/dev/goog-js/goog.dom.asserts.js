["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/dom/asserts.js"],"~:js","goog.provide(\"goog.dom.asserts\");\ngoog.require(\"goog.asserts\");\ngoog.dom.asserts.assertIsLocation = function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (win) {\n      if (!o || !(o instanceof win.Location) && o instanceof win.Element) {\n        goog.asserts.fail(\"Argument is not a Location (or a non-Element mock); got: %s\", goog.dom.asserts.debugStringForType_(o));\n      }\n    }\n  }\n  return o;\n};\ngoog.dom.asserts.assertIsElementType_ = function(o, typename) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (win && typeof win[typename] != \"undefined\") {\n      if (!o || !(o instanceof win[typename]) && (o instanceof win.Location || o instanceof win.Element)) {\n        goog.asserts.fail(\"Argument is not a %s (or a non-Element, non-Location mock); \" + \"got: %s\", typename, goog.dom.asserts.debugStringForType_(o));\n      }\n    }\n  }\n  return o;\n};\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLAnchorElement\");\n};\ngoog.dom.asserts.assertIsHTMLButtonElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLButtonElement\");\n};\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLLinkElement\");\n};\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLImageElement\");\n};\ngoog.dom.asserts.assertIsHTMLAudioElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLAudioElement\");\n};\ngoog.dom.asserts.assertIsHTMLVideoElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLVideoElement\");\n};\ngoog.dom.asserts.assertIsHTMLInputElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLInputElement\");\n};\ngoog.dom.asserts.assertIsHTMLTextAreaElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLTextAreaElement\");\n};\ngoog.dom.asserts.assertIsHTMLCanvasElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLCanvasElement\");\n};\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLEmbedElement\");\n};\ngoog.dom.asserts.assertIsHTMLFormElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLFormElement\");\n};\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLFrameElement\");\n};\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLIFrameElement\");\n};\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLObjectElement\");\n};\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\n  return goog.dom.asserts.assertIsElementType_(o, \"HTMLScriptElement\");\n};\ngoog.dom.asserts.debugStringForType_ = function(value) {\n  if (goog.isObject(value)) {\n    try {\n      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);\n    } catch (e) {\n      return \"\\x3cobject could not be stringified\\x3e\";\n    }\n  } else {\n    return value === undefined ? \"undefined\" : value === null ? \"null\" : typeof value;\n  }\n};\ngoog.dom.asserts.getWindow_ = function(o) {\n  try {\n    var doc = o && o.ownerDocument;\n    var win = doc && (doc.defaultView || doc.parentWindow);\n    win = win || goog.global;\n    if (win.Element && win.Location) {\n      return win;\n    }\n  } catch (ex) {\n  }\n  return null;\n};\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\ngoog.provide('goog.dom.asserts');\n\ngoog.require('goog.asserts');\n\n/**\n * @fileoverview Custom assertions to ensure that an element has the appropriate\n * type.\n *\n * Using a goog.dom.safe wrapper on an object on the incorrect type (via an\n * incorrect static type cast) can result in security bugs: For instance,\n * g.d.s.setAnchorHref ensures that the URL assigned to the .href attribute\n * satisfies the SafeUrl contract, i.e., is safe to dereference as a hyperlink.\n * However, the value assigned to a HTMLLinkElement's .href property requires\n * the stronger TrustedResourceUrl contract, since it can refer to a stylesheet.\n * Thus, using g.d.s.setAnchorHref on an (incorrectly statically typed) object\n * of type HTMLLinkElement can result in a security vulnerability.\n * Assertions of the correct run-time type help prevent such incorrect use.\n *\n * In some cases, code using the DOM API is tested using mock objects (e.g., a\n * plain object such as {'href': url} instead of an actual Location object).\n * To allow such mocking, the assertions permit objects of types that are not\n * relevant DOM API objects at all (for instance, not Element or Location).\n *\n * Note that instanceof checks don't work straightforwardly in older versions of\n * IE, or across frames (see,\n * http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object,\n * http://stackoverflow.com/questions/26248599/instanceof-htmlelement-in-iframe-is-not-element-or-object).\n *\n * Hence, these assertions may pass vacuously in such scenarios. The resulting\n * risk of security bugs is limited by the following factors:\n *  - A bug can only arise in scenarios involving incorrect static typing (the\n *    wrapper methods are statically typed to demand objects of the appropriate,\n *    precise type).\n *  - Typically, code is tested and exercised in multiple browsers.\n */\n\n/**\n * Asserts that a given object is a Location.\n *\n * To permit this assertion to pass in the context of tests where DOM APIs might\n * be mocked, also accepts any other type except for subtypes of {!Element}.\n * This is to ensure that, for instance, HTMLLinkElement is not being used in\n * place of a Location, since this could result in security bugs due to stronger\n * contracts required for assignments to the href property of the latter.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!Location}\n */\ngoog.dom.asserts.assertIsLocation = function(o) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (win) {\n      if (!o || (!(o instanceof win.Location) && o instanceof win.Element)) {\n        goog.asserts.fail(\n            'Argument is not a Location (or a non-Element mock); got: %s',\n            goog.dom.asserts.debugStringForType_(o));\n      }\n    }\n  }\n  return /** @type {!Location} */ (o);\n};\n\n\n/**\n * Asserts that a given object is either the given subtype of Element\n * or a non-Element, non-Location Mock.\n *\n * To permit this assertion to pass in the context of tests where DOM\n * APIs might be mocked, also accepts any other type except for\n * subtypes of {!Element}.  This is to ensure that, for instance,\n * HTMLScriptElement is not being used in place of a HTMLImageElement,\n * since this could result in security bugs due to stronger contracts\n * required for assignments to the src property of the latter.\n *\n * The DOM type is looked up in the window the object belongs to.  In\n * some contexts, this might not be possible (e.g. when running tests\n * outside a browser, cross-domain lookup). In this case, the\n * assertions are skipped.\n *\n * @param {?Object} o The object whose type to assert.\n * @param {string} typename The name of the DOM type.\n * @return {!Element} The object.\n * @private\n */\n// TODO(bangert): Make an analog of goog.dom.TagName to correctly handle casts?\ngoog.dom.asserts.assertIsElementType_ = function(o, typename) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (win && typeof win[typename] != 'undefined') {\n      if (!o ||\n          (!(o instanceof win[typename]) &&\n           (o instanceof win.Location || o instanceof win.Element))) {\n        goog.asserts.fail(\n            'Argument is not a %s (or a non-Element, non-Location mock); ' +\n                'got: %s',\n            typename, goog.dom.asserts.debugStringForType_(o));\n      }\n    }\n  }\n  return /** @type {!Element} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLAnchorElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not of type Location nor a subtype\n * of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLAnchorElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlAnchorElement instead.\n */\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLAnchorElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLAnchorElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLButtonElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLButtonElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlButtonElement instead.\n */\ngoog.dom.asserts.assertIsHTMLButtonElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLButtonElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLButtonElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLLinkElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLLinkElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlLinkElement instead.\n */\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLLinkElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLLinkElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLImageElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLImageElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlImageElement instead.\n */\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLImageElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLImageElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLAudioElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLAudioElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlAudioElement instead.\n */\ngoog.dom.asserts.assertIsHTMLAudioElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLAudioElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLAudioElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLVideoElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLVideoElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlVideoElement instead.\n */\ngoog.dom.asserts.assertIsHTMLVideoElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLVideoElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLVideoElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLInputElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLInputElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlInputElement instead.\n */\ngoog.dom.asserts.assertIsHTMLInputElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLInputElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLInputElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLTextAreaElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLTextAreaElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlTextAreaElement instead.\n */\ngoog.dom.asserts.assertIsHTMLTextAreaElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLTextAreaElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLTextAreaElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLCanvasElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLCanvasElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlCanvasElement instead.\n */\ngoog.dom.asserts.assertIsHTMLCanvasElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLCanvasElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLCanvasElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLEmbedElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLEmbedElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlEmbedElement instead.\n */\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLEmbedElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLEmbedElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLFormElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFormElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlFormElement instead.\n */\ngoog.dom.asserts.assertIsHTMLFormElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLFormElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLFormElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFrameElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlFrameElement instead.\n */\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLFrameElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLFrameElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLIFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLIFrameElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlIFrameElement instead.\n */\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLIFrameElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLIFrameElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLObjectElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLObjectElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlObjectElement instead.\n */\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLObjectElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLObjectElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLScriptElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLScriptElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlScriptElement instead.\n */\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLScriptElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLScriptElement'));\n};\n\n/**\n * Returns a string representation of a value's type.\n *\n * @param {*} value An object, or primitive.\n * @return {string} The best display name for the value.\n * @private\n */\ngoog.dom.asserts.debugStringForType_ = function(value) {\n  'use strict';\n  if (goog.isObject(value)) {\n    try {\n      return /** @type {string|undefined} */ (value.constructor.displayName) ||\n          value.constructor.name || Object.prototype.toString.call(value);\n    } catch (e) {\n      return '<object could not be stringified>';\n    }\n  } else {\n    return value === undefined ? 'undefined' :\n                                 value === null ? 'null' : typeof value;\n  }\n};\n\n/**\n * Gets window of element.\n * @param {?Object} o\n * @return {?Window}\n * @private\n * @suppress {strictMissingProperties} ownerDocument not defined on Object\n */\ngoog.dom.asserts.getWindow_ = function(o) {\n  'use strict';\n  try {\n    var doc = o && o.ownerDocument;\n    // This can throw “Blocked a frame with origin \"chrome-extension://...\" from\n    // accessing a cross-origin frame” in Chrome extension.\n    var win =\n        doc && /** @type {?Window} */ (doc.defaultView || doc.parentWindow);\n    win = win || /** @type {!Window} */ (goog.global);\n    // This can throw “Permission denied to access property \"Element\" on\n    // cross-origin object”.\n    if (win.Element && win.Location) {\n      return win;\n    }\n  } catch (ex) {\n  }\n  return null;\n};\n","~:compiled-at",1623605884844,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.dom.asserts.js\",\n\"lineCount\":93,\n\"mappings\":\"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\",\n\"sources\":[\"goog/dom/asserts.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\ngoog.provide('goog.dom.asserts');\\n\\ngoog.require('goog.asserts');\\n\\n/**\\n * @fileoverview Custom assertions to ensure that an element has the appropriate\\n * type.\\n *\\n * Using a goog.dom.safe wrapper on an object on the incorrect type (via an\\n * incorrect static type cast) can result in security bugs: For instance,\\n * g.d.s.setAnchorHref ensures that the URL assigned to the .href attribute\\n * satisfies the SafeUrl contract, i.e., is safe to dereference as a hyperlink.\\n * However, the value assigned to a HTMLLinkElement's .href property requires\\n * the stronger TrustedResourceUrl contract, since it can refer to a stylesheet.\\n * Thus, using g.d.s.setAnchorHref on an (incorrectly statically typed) object\\n * of type HTMLLinkElement can result in a security vulnerability.\\n * Assertions of the correct run-time type help prevent such incorrect use.\\n *\\n * In some cases, code using the DOM API is tested using mock objects (e.g., a\\n * plain object such as {'href': url} instead of an actual Location object).\\n * To allow such mocking, the assertions permit objects of types that are not\\n * relevant DOM API objects at all (for instance, not Element or Location).\\n *\\n * Note that instanceof checks don't work straightforwardly in older versions of\\n * IE, or across frames (see,\\n * http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object,\\n * http://stackoverflow.com/questions/26248599/instanceof-htmlelement-in-iframe-is-not-element-or-object).\\n *\\n * Hence, these assertions may pass vacuously in such scenarios. The resulting\\n * risk of security bugs is limited by the following factors:\\n *  - A bug can only arise in scenarios involving incorrect static typing (the\\n *    wrapper methods are statically typed to demand objects of the appropriate,\\n *    precise type).\\n *  - Typically, code is tested and exercised in multiple browsers.\\n */\\n\\n/**\\n * Asserts that a given object is a Location.\\n *\\n * To permit this assertion to pass in the context of tests where DOM APIs might\\n * be mocked, also accepts any other type except for subtypes of {!Element}.\\n * This is to ensure that, for instance, HTMLLinkElement is not being used in\\n * place of a Location, since this could result in security bugs due to stronger\\n * contracts required for assignments to the href property of the latter.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!Location}\\n */\\ngoog.dom.asserts.assertIsLocation = function(o) {\\n  'use strict';\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (win) {\\n      if (!o || (!(o instanceof win.Location) && o instanceof win.Element)) {\\n        goog.asserts.fail(\\n            'Argument is not a Location (or a non-Element mock); got: %s',\\n            goog.dom.asserts.debugStringForType_(o));\\n      }\\n    }\\n  }\\n  return /** @type {!Location} */ (o);\\n};\\n\\n\\n/**\\n * Asserts that a given object is either the given subtype of Element\\n * or a non-Element, non-Location Mock.\\n *\\n * To permit this assertion to pass in the context of tests where DOM\\n * APIs might be mocked, also accepts any other type except for\\n * subtypes of {!Element}.  This is to ensure that, for instance,\\n * HTMLScriptElement is not being used in place of a HTMLImageElement,\\n * since this could result in security bugs due to stronger contracts\\n * required for assignments to the src property of the latter.\\n *\\n * The DOM type is looked up in the window the object belongs to.  In\\n * some contexts, this might not be possible (e.g. when running tests\\n * outside a browser, cross-domain lookup). In this case, the\\n * assertions are skipped.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @param {string} typename The name of the DOM type.\\n * @return {!Element} The object.\\n * @private\\n */\\n// TODO(bangert): Make an analog of goog.dom.TagName to correctly handle casts?\\ngoog.dom.asserts.assertIsElementType_ = function(o, typename) {\\n  'use strict';\\n  if (goog.asserts.ENABLE_ASSERTS) {\\n    var win = goog.dom.asserts.getWindow_(o);\\n    if (win && typeof win[typename] != 'undefined') {\\n      if (!o ||\\n          (!(o instanceof win[typename]) &&\\n           (o instanceof win.Location || o instanceof win.Element))) {\\n        goog.asserts.fail(\\n            'Argument is not a %s (or a non-Element, non-Location mock); ' +\\n                'got: %s',\\n            typename, goog.dom.asserts.debugStringForType_(o));\\n      }\\n    }\\n  }\\n  return /** @type {!Element} */ (o);\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLAnchorElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not of type Location nor a subtype\\n * of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLAnchorElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlAnchorElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLAnchorElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLAnchorElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLButtonElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLButtonElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlButtonElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLButtonElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLButtonElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLButtonElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLLinkElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLLinkElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlLinkElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLLinkElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLLinkElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLImageElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLImageElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlImageElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLImageElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLImageElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLAudioElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLAudioElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlAudioElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLAudioElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLAudioElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLAudioElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLVideoElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLVideoElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlVideoElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLVideoElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLVideoElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLVideoElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLInputElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLInputElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlInputElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLInputElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLInputElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLInputElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLTextAreaElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLTextAreaElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlTextAreaElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLTextAreaElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLTextAreaElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLTextAreaElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLCanvasElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLCanvasElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlCanvasElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLCanvasElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLCanvasElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLCanvasElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLEmbedElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLEmbedElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlEmbedElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLEmbedElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLEmbedElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLFormElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLFormElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlFormElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLFormElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLFormElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLFormElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLFrameElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLFrameElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlFrameElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLFrameElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLFrameElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLIFrameElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLIFrameElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlIFrameElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLIFrameElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLIFrameElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLObjectElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLObjectElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlObjectElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLObjectElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLObjectElement'));\\n};\\n\\n/**\\n * Asserts that a given object is a HTMLScriptElement.\\n *\\n * To permit this assertion to pass in the context of tests where elements might\\n * be mocked, also accepts objects that are not a subtype of Element.\\n *\\n * @param {?Object} o The object whose type to assert.\\n * @return {!HTMLScriptElement}\\n * @deprecated Use goog.asserts.dom.assertIsHtmlScriptElement instead.\\n */\\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\\n  'use strict';\\n  return /** @type {!HTMLScriptElement} */ (\\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLScriptElement'));\\n};\\n\\n/**\\n * Returns a string representation of a value's type.\\n *\\n * @param {*} value An object, or primitive.\\n * @return {string} The best display name for the value.\\n * @private\\n */\\ngoog.dom.asserts.debugStringForType_ = function(value) {\\n  'use strict';\\n  if (goog.isObject(value)) {\\n    try {\\n      return /** @type {string|undefined} */ (value.constructor.displayName) ||\\n          value.constructor.name || Object.prototype.toString.call(value);\\n    } catch (e) {\\n      return '<object could not be stringified>';\\n    }\\n  } else {\\n    return value === undefined ? 'undefined' :\\n                                 value === null ? 'null' : typeof value;\\n  }\\n};\\n\\n/**\\n * Gets window of element.\\n * @param {?Object} o\\n * @return {?Window}\\n * @private\\n * @suppress {strictMissingProperties} ownerDocument not defined on Object\\n */\\ngoog.dom.asserts.getWindow_ = function(o) {\\n  'use strict';\\n  try {\\n    var doc = o && o.ownerDocument;\\n    // This can throw \\u201cBlocked a frame with origin \\\"chrome-extension://...\\\" from\\n    // accessing a cross-origin frame\\u201d in Chrome extension.\\n    var win =\\n        doc && /** @type {?Window} */ (doc.defaultView || doc.parentWindow);\\n    win = win || /** @type {!Window} */ (goog.global);\\n    // This can throw \\u201cPermission denied to access property \\\"Element\\\" on\\n    // cross-origin object\\u201d.\\n    if (win.Element && win.Location) {\\n      return win;\\n    }\\n  } catch (ex) {\\n  }\\n  return null;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"dom\",\"asserts\",\"assertIsLocation\",\"goog.dom.asserts.assertIsLocation\",\"o\",\"ENABLE_ASSERTS\",\"win\",\"getWindow_\",\"Location\",\"Element\",\"fail\",\"debugStringForType_\",\"assertIsElementType_\",\"goog.dom.asserts.assertIsElementType_\",\"typename\",\"assertIsHTMLAnchorElement\",\"goog.dom.asserts.assertIsHTMLAnchorElement\",\"assertIsHTMLButtonElement\",\"goog.dom.asserts.assertIsHTMLButtonElement\",\"assertIsHTMLLinkElement\",\"goog.dom.asserts.assertIsHTMLLinkElement\",\"assertIsHTMLImageElement\",\"goog.dom.asserts.assertIsHTMLImageElement\",\"assertIsHTMLAudioElement\",\"goog.dom.asserts.assertIsHTMLAudioElement\",\"assertIsHTMLVideoElement\",\"goog.dom.asserts.assertIsHTMLVideoElement\",\"assertIsHTMLInputElement\",\"goog.dom.asserts.assertIsHTMLInputElement\",\"assertIsHTMLTextAreaElement\",\"goog.dom.asserts.assertIsHTMLTextAreaElement\",\"assertIsHTMLCanvasElement\",\"goog.dom.asserts.assertIsHTMLCanvasElement\",\"assertIsHTMLEmbedElement\",\"goog.dom.asserts.assertIsHTMLEmbedElement\",\"assertIsHTMLFormElement\",\"goog.dom.asserts.assertIsHTMLFormElement\",\"assertIsHTMLFrameElement\",\"goog.dom.asserts.assertIsHTMLFrameElement\",\"assertIsHTMLIFrameElement\",\"goog.dom.asserts.assertIsHTMLIFrameElement\",\"assertIsHTMLObjectElement\",\"goog.dom.asserts.assertIsHTMLObjectElement\",\"assertIsHTMLScriptElement\",\"goog.dom.asserts.assertIsHTMLScriptElement\",\"goog.dom.asserts.debugStringForType_\",\"value\",\"isObject\",\"constructor\",\"displayName\",\"name\",\"Object\",\"prototype\",\"toString\",\"call\",\"e\",\"undefined\",\"goog.dom.asserts.getWindow_\",\"doc\",\"ownerDocument\",\"defaultView\",\"parentWindow\",\"global\",\"ex\"]\n}\n"]