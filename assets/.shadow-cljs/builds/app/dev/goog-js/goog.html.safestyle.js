["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/html/safestyle.js"],"~:js","goog.provide(\"goog.html.SafeStyle\");\ngoog.require(\"goog.array\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.html.SafeUrl\");\ngoog.require(\"goog.string.Const\");\ngoog.require(\"goog.string.TypedString\");\ngoog.require(\"goog.string.internal\");\ngoog.html.SafeStyle = class {\n  constructor(value, token) {\n    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = token === goog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_ ? value : \"\";\n  }\n};\ngoog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;\ngoog.html.SafeStyle.fromConstant = function(style) {\n  var styleString = goog.string.Const.unwrap(style);\n  if (styleString.length === 0) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.asserts.assert(goog.string.internal.endsWith(styleString, \";\"), \"Last character of style string is not ';': \" + styleString);\n  goog.asserts.assert(goog.string.internal.contains(styleString, \":\"), \"Style string must contain at least one ':', to \" + 'specify a \"name: value\" pair: ' + styleString);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);\n};\ngoog.html.SafeStyle.prototype.getTypedStringValue = function() {\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n};\nif (goog.DEBUG) {\n  goog.html.SafeStyle.prototype.toString = function() {\n    return \"SafeStyle{\" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + \"}\";\n  };\n}\ngoog.html.SafeStyle.unwrap = function(safeStyle) {\n  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle) {\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n  } else {\n    goog.asserts.fail(\"expected object of type SafeStyle, got '\" + safeStyle + \"' of type \" + goog.typeOf(safeStyle));\n    return \"type_error:SafeStyle\";\n  }\n};\ngoog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_ = {};\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {\n  return new goog.html.SafeStyle(style, goog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_);\n};\ngoog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\"\");\ngoog.html.SafeStyle.INNOCUOUS_STRING = \"zClosurez\";\ngoog.html.SafeStyle.PropertyValue;\ngoog.html.SafeStyle.PropertyMap;\ngoog.html.SafeStyle.create = function(map) {\n  var style = \"\";\n  for (var name in map) {\n    if (Object.prototype.hasOwnProperty.call(map, name)) {\n      if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\n        throw new Error(\"Name allows only [-_a-zA-Z0-9], got: \" + name);\n      }\n      var value = map[name];\n      if (value == null) {\n        continue;\n      }\n      if (Array.isArray(value)) {\n        value = goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_).join(\" \");\n      } else {\n        value = goog.html.SafeStyle.sanitizePropertyValue_(value);\n      }\n      style += name + \":\" + value + \";\";\n    }\n  }\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);\n};\ngoog.html.SafeStyle.sanitizePropertyValue_ = function(value) {\n  if (value instanceof goog.html.SafeUrl) {\n    var url = goog.html.SafeUrl.unwrap(value);\n    return 'url(\"' + url.replace(/</g, \"%3c\").replace(/[\\\\\"]/g, \"\\\\$\\x26\") + '\")';\n  }\n  var result = value instanceof goog.string.Const ? goog.string.Const.unwrap(value) : goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\n  if (/[{;}]/.test(result)) {\n    throw new goog.asserts.AssertionError(\"Value does not allow [{;}], got: %s.\", [result]);\n  }\n  return result;\n};\ngoog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {\n  var valueWithoutFunctions = value.replace(goog.html.SafeStyle.FUNCTIONS_RE_, \"$1\").replace(goog.html.SafeStyle.FUNCTIONS_RE_, \"$1\").replace(goog.html.SafeStyle.URL_RE_, \"url\");\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\n    goog.asserts.fail(\"String value allows only \" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + \" and simple functions, got: \" + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else {\n    if (goog.html.SafeStyle.COMMENT_RE_.test(value)) {\n      goog.asserts.fail(\"String value disallows comments, got: \" + value);\n      return goog.html.SafeStyle.INNOCUOUS_STRING;\n    } else {\n      if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\n        goog.asserts.fail(\"String value requires balanced quotes, got: \" + value);\n        return goog.html.SafeStyle.INNOCUOUS_STRING;\n      } else {\n        if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(value)) {\n          goog.asserts.fail(\"String value requires balanced square brackets and one\" + \" identifier per pair of brackets, got: \" + value);\n          return goog.html.SafeStyle.INNOCUOUS_STRING;\n        }\n      }\n    }\n  }\n  return goog.html.SafeStyle.sanitizeUrl_(value);\n};\ngoog.html.SafeStyle.hasBalancedQuotes_ = function(value) {\n  var outsideSingle = true;\n  var outsideDouble = true;\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charAt(i);\n    if (c == \"'\" && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else {\n      if (c == '\"' && outsideSingle) {\n        outsideDouble = !outsideDouble;\n      }\n    }\n  }\n  return outsideSingle && outsideDouble;\n};\ngoog.html.SafeStyle.hasBalancedSquareBrackets_ = function(value) {\n  var outside = true;\n  var tokenRe = /^[-_a-zA-Z0-9]$/;\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charAt(i);\n    if (c == \"]\") {\n      if (outside) {\n        return false;\n      }\n      outside = true;\n    } else {\n      if (c == \"[\") {\n        if (!outside) {\n          return false;\n        }\n        outside = false;\n      } else {\n        if (!outside && !tokenRe.test(c)) {\n          return false;\n        }\n      }\n    }\n  }\n  return outside;\n};\ngoog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = \"[-,.\\\"'%_!# a-zA-Z0-9\\\\[\\\\]]\";\ngoog.html.SafeStyle.VALUE_RE_ = new RegExp(\"^\" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + \"+$\");\ngoog.html.SafeStyle.URL_RE_ = new RegExp(\"\\\\b(url\\\\([ \\t\\n]*)(\" + \"'[ -\\x26(-\\\\[\\\\]-~]*'\" + '|\"[ !#-\\\\[\\\\]-~]*\"' + \"|[!#-\\x26*-\\\\[\\\\]-~]*\" + \")([ \\t\\n]*\\\\))\", \"g\");\ngoog.html.SafeStyle.ALLOWED_FUNCTIONS_ = [\"calc\", \"cubic-bezier\", \"fit-content\", \"hsl\", \"hsla\", \"linear-gradient\", \"matrix\", \"minmax\", \"repeat\", \"rgb\", \"rgba\", \"(rotate|scale|translate)(X|Y|Z|3d)?\", ];\ngoog.html.SafeStyle.FUNCTIONS_RE_ = new RegExp(\"\\\\b(\" + goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join(\"|\") + \")\" + \"\\\\([-+*/0-9a-z.%\\\\[\\\\], ]+\\\\)\", \"g\");\ngoog.html.SafeStyle.COMMENT_RE_ = /\\/\\*/;\ngoog.html.SafeStyle.sanitizeUrl_ = function(value) {\n  return value.replace(goog.html.SafeStyle.URL_RE_, function(match, before, url, after) {\n    var quote = \"\";\n    url = url.replace(/^(['\"])(.*)\\1$/, function(match, start, inside) {\n      quote = start;\n      return inside;\n    });\n    var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();\n    return before + quote + sanitized + quote + after;\n  });\n};\ngoog.html.SafeStyle.concat = function(var_args) {\n  var style = \"\";\n  var addArgument = function(argument) {\n    if (Array.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      style += goog.html.SafeStyle.unwrap(argument);\n    }\n  };\n  goog.array.forEach(arguments, addArgument);\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);\n};\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The SafeStyle type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide('goog.html.SafeStyle');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.TypedString');\ngoog.require('goog.string.internal');\n\n\n\n/**\n * A string-like object which represents a sequence of CSS declarations\n * (`propertyName1: propertyvalue1; propertyName2: propertyValue2; ...`)\n * and that carries the security type contract that its value, as a string,\n * will not cause untrusted script execution (XSS) when evaluated as CSS in a\n * browser.\n *\n * Instances of this type must be created via the factory methods\n * (`goog.html.SafeStyle.create` or `goog.html.SafeStyle.fromConstant`)\n * and not by invoking its constructor. The constructor intentionally takes an\n * extra parameter that cannot be constructed outside of this file and the type\n * is immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * SafeStyle's string representation can safely be:\n * <ul>\n *   <li>Interpolated as the content of a *quoted* HTML style attribute.\n *       However, the SafeStyle string *must be HTML-attribute-escaped* before\n *       interpolation.\n *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.\n *       '<' characters in the SafeStyle string *must be CSS-escaped* before\n *       interpolation. The SafeStyle string is also guaranteed not to be able\n *       to introduce new properties or elide existing ones.\n *   <li>Interpolated as the content of a {}-wrapped block within an HTML\n *       &lt;style&gt; element. '<' characters in the SafeStyle string\n *       *must be CSS-escaped* before interpolation.\n *   <li>Assigned to the style property of a DOM node. The SafeStyle string\n *       should not be escaped before being assigned to the property.\n * </ul>\n *\n * A SafeStyle may never contain literal angle brackets. Otherwise, it could\n * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't\n * be HTML escaped). For example, if the SafeStyle containing\n * `font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'` were\n * interpolated within a &lt;style&gt; tag, this would then break out of the\n * style context into HTML.\n *\n * A SafeStyle may contain literal single or double quotes, and as such the\n * entire style string must be escaped when used in a style attribute (if\n * this were not the case, the string could contain a matching quote that\n * would escape from the style attribute).\n *\n * Values of this type must be composable, i.e. for any two values\n * `style1` and `style2` of this type,\n * `goog.html.SafeStyle.unwrap(style1) +\n * goog.html.SafeStyle.unwrap(style2)` must itself be a value that satisfies\n * the SafeStyle type constraint. This requirement implies that for any value\n * `style` of this type, `goog.html.SafeStyle.unwrap(style)` must\n * not end in a \"property value\" or \"property name\" context. For example,\n * a value of `background:url(\"` or `font-` would not satisfy the\n * SafeStyle contract. This is because concatenating such strings with a\n * second value that itself does not contain unsafe CSS can result in an\n * overall string that does. For example, if `javascript:evil())\"` is\n * appended to `background:url(\"}, the resulting string may result in\n * the execution of a malicious script.\n *\n * TODO(mlourenco): Consider whether we should implement UTF-8 interchange\n * validity checks and blacklisting of newlines (including Unicode ones) and\n * other whitespace characters (\\t, \\f). Document here if so and also update\n * SafeStyle.fromConstant().\n *\n * The following example values comply with this type's contract:\n * <ul>\n *   <li><pre>width: 1em;</pre>\n *   <li><pre>height:1em;</pre>\n *   <li><pre>width: 1em;height: 1em;</pre>\n *   <li><pre>background:url('http://url');</pre>\n * </ul>\n * In addition, the empty string is safe for use in a CSS attribute.\n *\n * The following example values do NOT comply with this type's contract:\n * <ul>\n *   <li><pre>background: red</pre> (missing a trailing semi-colon)\n *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)\n *   <li><pre>1em</pre> (missing an attribute name, which provides context for\n *       the value)\n * </ul>\n *\n * @see goog.html.SafeStyle#create\n * @see goog.html.SafeStyle#fromConstant\n * @see http://www.w3.org/TR/css3-syntax/\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeStyle = class {\n  /**\n   * @param {string} value\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, token) {\n    /**\n     * The contained value of this SafeStyle.  The field has a purposely\n     * ugly name to make (non-compiled) code that attempts to directly access\n     * this field stand out.\n     * @private {string}\n     */\n    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ =\n        (token === goog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_) ? value : '';\n  }\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Creates a SafeStyle object from a compile-time constant string.\n *\n * `style` should be in the format\n * `name: value; [name: value; ...]` and must not have any < or >\n * characters in it. This is so that SafeStyle's contract is preserved,\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n * declarations and without affecting the syntactic structure of any\n * surrounding CSS and HTML.\n *\n * This method performs basic sanity checks on the format of `style`\n * but does not constrain the format of `name` and `value`, except\n * for disallowing tag characters.\n *\n * @param {!goog.string.Const} style A compile-time-constant string from which\n *     to create a SafeStyle.\n * @return {!goog.html.SafeStyle} A SafeStyle object initialized to\n *     `style`.\n */\ngoog.html.SafeStyle.fromConstant = function(style) {\n  'use strict';\n  var styleString = goog.string.Const.unwrap(style);\n  if (styleString.length === 0) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.asserts.assert(\n      goog.string.internal.endsWith(styleString, ';'),\n      'Last character of style string is not \\';\\': ' + styleString);\n  goog.asserts.assert(\n      goog.string.internal.contains(styleString, ':'),\n      'Style string must contain at least one \\':\\', to ' +\n          'specify a \"name: value\" pair: ' + styleString);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      styleString);\n};\n\n\n/**\n * Returns this SafeStyle's value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object's type is\n * indeed `SafeStyle`, use `goog.html.SafeStyle.unwrap` instead of\n * this method. If in doubt, assume that it's security relevant. In particular,\n * note that goog.html functions which return a goog.html type do not guarantee\n * the returned instance is of the right type. For example:\n *\n * <pre>\n * var fakeSafeHtml = new String('fake');\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n * // instanceof goog.html.SafeHtml.\n * </pre>\n *\n * @see goog.html.SafeStyle#unwrap\n * @override\n */\ngoog.html.SafeStyle.prototype.getTypedStringValue = function() {\n  'use strict';\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeStyle, use\n   * `goog.html.SafeStyle.unwrap`.\n   *\n   * @see goog.html.SafeStyle#unwrap\n   * @override\n   */\n  goog.html.SafeStyle.prototype.toString = function() {\n    'use strict';\n    return 'SafeStyle{' + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ +\n        '}';\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * SafeStyle object, and returns its value.\n *\n * @param {!goog.html.SafeStyle} safeStyle The object to extract from.\n * @return {string} The safeStyle object's contained string, unless\n *     the run-time type check fails. In that case, `unwrap` returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeStyle.unwrap = function(safeStyle) {\n  'use strict';\n  // Perform additional Run-time type-checking to ensure that\n  // safeStyle is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  if (safeStyle instanceof goog.html.SafeStyle &&\n      safeStyle.constructor === goog.html.SafeStyle) {\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n  } else {\n    goog.asserts.fail(\n        'expected object of type SafeStyle, got \\'' + safeStyle +\n        '\\' of type ' + goog.typeOf(safeStyle));\n    return 'type_error:SafeStyle';\n  }\n};\n\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @private {!Object}\n * @const\n */\ngoog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_ = {};\n\n\n/**\n * Package-internal utility method to create SafeStyle instances.\n *\n * @param {string} style The string to initialize the SafeStyle object with.\n * @return {!goog.html.SafeStyle} The initialized SafeStyle object.\n * @package\n */\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(\n    style) {\n  'use strict';\n  return new goog.html.SafeStyle(\n      style, goog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_);\n};\n\n\n/**\n * A SafeStyle instance corresponding to the empty string.\n * @const {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.EMPTY =\n    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');\n\n\n/**\n * The innocuous string generated by goog.html.SafeStyle.create when passed\n * an unsafe value.\n * @const {string}\n */\ngoog.html.SafeStyle.INNOCUOUS_STRING = 'zClosurez';\n\n\n/**\n * A single property value.\n * @typedef {string|!goog.string.Const|!goog.html.SafeUrl}\n */\ngoog.html.SafeStyle.PropertyValue;\n\n\n/**\n * Mapping of property names to their values.\n * We don't support numbers even though some values might be numbers (e.g.\n * line-height or 0 for any length). The reason is that most numeric values need\n * units (e.g. '1px') and allowing numbers could cause users forgetting about\n * them.\n * @typedef {!Object<string, ?goog.html.SafeStyle.PropertyValue|\n *     ?Array<!goog.html.SafeStyle.PropertyValue>>}\n */\ngoog.html.SafeStyle.PropertyMap;\n\n\n/**\n * Creates a new SafeStyle object from the properties specified in the map.\n * @param {!goog.html.SafeStyle.PropertyMap} map Mapping of property names to\n *     their values, for example {'margin': '1px'}. Names must consist of\n *     [-_a-zA-Z0-9]. Values might be strings consisting of\n *     [-,.'\"%_!# a-zA-Z0-9[\\]], where \", ', and [] must be properly balanced.\n *     We also allow simple functions like rgb() and url() which sanitizes its\n *     contents. Other values must be wrapped in goog.string.Const. URLs might\n *     be passed as goog.html.SafeUrl which will be wrapped into url(\"\"). We\n *     also support array whose elements are joined with ' '. Null value causes\n *     skipping the property.\n * @return {!goog.html.SafeStyle}\n * @throws {!Error} If invalid name is provided.\n * @throws {!goog.asserts.AssertionError} If invalid value is provided. With\n *     disabled assertions, invalid value is replaced by\n *     goog.html.SafeStyle.INNOCUOUS_STRING.\n */\ngoog.html.SafeStyle.create = function(map) {\n  'use strict';\n  var style = '';\n  for (var name in map) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\n    if (Object.prototype.hasOwnProperty.call(map, name)) {\n      if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\n        throw new Error('Name allows only [-_a-zA-Z0-9], got: ' + name);\n      }\n      var value = map[name];\n      if (value == null) {\n        continue;\n      }\n      if (Array.isArray(value)) {\n        value =\n            goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_)\n                .join(' ');\n      } else {\n        value = goog.html.SafeStyle.sanitizePropertyValue_(value);\n      }\n      style += name + ':' + value + ';';\n    }\n  }\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n\n\n/**\n * Checks and converts value to string.\n * @param {!goog.html.SafeStyle.PropertyValue} value\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizePropertyValue_ = function(value) {\n  'use strict';\n  if (value instanceof goog.html.SafeUrl) {\n    var url = goog.html.SafeUrl.unwrap(value);\n    return 'url(\"' + url.replace(/</g, '%3c').replace(/[\\\\\"]/g, '\\\\$&') + '\")';\n  }\n  var result = value instanceof goog.string.Const ?\n      goog.string.Const.unwrap(value) :\n      goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\n  // These characters can be used to change context and we don't want that even\n  // with const values.\n  if (/[{;}]/.test(result)) {\n    throw new goog.asserts.AssertionError(\n        'Value does not allow [{;}], got: %s.', [result]);\n  }\n  return result;\n};\n\n\n/**\n * Checks string value.\n * @param {string} value\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {\n  'use strict';\n  // Some CSS property values permit nested functions. We allow one level of\n  // nesting, and all nested functions must also be in the FUNCTIONS_RE_ list.\n  var valueWithoutFunctions =\n      value.replace(goog.html.SafeStyle.FUNCTIONS_RE_, '$1')\n          .replace(goog.html.SafeStyle.FUNCTIONS_RE_, '$1')\n          .replace(goog.html.SafeStyle.URL_RE_, 'url');\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\n    goog.asserts.fail(\n        'String value allows only ' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ +\n        ' and simple functions, got: ' + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else if (goog.html.SafeStyle.COMMENT_RE_.test(value)) {\n    goog.asserts.fail('String value disallows comments, got: ' + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\n    goog.asserts.fail('String value requires balanced quotes, got: ' + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(value)) {\n    goog.asserts.fail(\n        'String value requires balanced square brackets and one' +\n        ' identifier per pair of brackets, got: ' + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeStyle.sanitizeUrl_(value);\n};\n\n\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * @param {string} value Untrusted CSS property value.\n * @return {boolean} True if property value is safe with respect to quote\n *     balancedness.\n * @private\n */\ngoog.html.SafeStyle.hasBalancedQuotes_ = function(value) {\n  'use strict';\n  var outsideSingle = true;\n  var outsideDouble = true;\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charAt(i);\n    if (c == '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c == '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n};\n\n\n/**\n * Checks that square brackets ([ and ]) are properly balanced inside a string,\n * and that the content in the square brackets is one ident-token;\n * see https://www.w3.org/TR/css-syntax-3/#ident-token-diagram.\n * For practicality, and in line with other restrictions posed on SafeStyle\n * strings, we restrict the character set allowable in the ident-token to\n * [-_a-zA-Z0-9].\n * @param {string} value Untrusted CSS property value.\n * @return {boolean} True if property value is safe with respect to square\n *     bracket balancedness.\n * @private\n */\ngoog.html.SafeStyle.hasBalancedSquareBrackets_ = function(value) {\n  'use strict';\n  var outside = true;\n  var tokenRe = /^[-_a-zA-Z0-9]$/;\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charAt(i);\n    if (c == ']') {\n      if (outside) return false;  // Unbalanced ].\n      outside = true;\n    } else if (c == '[') {\n      if (!outside) return false;  // No nesting.\n      outside = false;\n    } else if (!outside && !tokenRe.test(c)) {\n      return false;\n    }\n  }\n  return outside;\n};\n\n\n/**\n * Characters allowed in goog.html.SafeStyle.VALUE_RE_.\n * @private {string}\n */\ngoog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = '[-,.\"\\'%_!# a-zA-Z0-9\\\\[\\\\]]';\n\n\n/**\n * Regular expression for safe values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure\n * they're balanced.\n *\n * Square brackets ([ and ]) are allowed, but a check must be done elsewhere\n * to ensure they're balanced. The content inside a pair of square brackets must\n * be one alphanumeric identifier.\n *\n * ',' allows multiple values to be assigned to the same property\n * (e.g. background-attachment or font-family) and hence could allow\n * multiple values to get injected, but that should pose no risk of XSS.\n *\n * The expression checks only for XSS safety, not for CSS validity.\n * @const {!RegExp}\n * @private\n */\ngoog.html.SafeStyle.VALUE_RE_ =\n    new RegExp('^' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + '+$');\n\n\n/**\n * Regular expression for url(). We support URLs allowed by\n * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape\n * sequences. Use percent-encoding if you need to use special characters like\n * backslash.\n * @private @const {!RegExp}\n */\ngoog.html.SafeStyle.URL_RE_ = new RegExp(\n    '\\\\b(url\\\\([ \\t\\n]*)(' +\n        '\\'[ -&(-\\\\[\\\\]-~]*\\'' +  // Printable characters except ' and \\.\n        '|\"[ !#-\\\\[\\\\]-~]*\"' +    // Printable characters except \" and \\.\n        '|[!#-&*-\\\\[\\\\]-~]*' +    // Printable characters except [ \"'()\\\\].\n        ')([ \\t\\n]*\\\\))',\n    'g');\n\n/**\n * Names of functions allowed in FUNCTIONS_RE_.\n * @private @const {!Array<string>}\n */\ngoog.html.SafeStyle.ALLOWED_FUNCTIONS_ = [\n  'calc',\n  'cubic-bezier',\n  'fit-content',\n  'hsl',\n  'hsla',\n  'linear-gradient',\n  'matrix',\n  'minmax',\n  'repeat',\n  'rgb',\n  'rgba',\n  '(rotate|scale|translate)(X|Y|Z|3d)?',\n];\n\n\n/**\n * Regular expression for simple functions.\n * @private @const {!RegExp}\n */\ngoog.html.SafeStyle.FUNCTIONS_RE_ = new RegExp(\n    '\\\\b(' + goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join('|') + ')' +\n        '\\\\([-+*/0-9a-z.%\\\\[\\\\], ]+\\\\)',\n    'g');\n\n\n/**\n * Regular expression for comments. These are disallowed in CSS property values.\n * @private @const {!RegExp}\n */\ngoog.html.SafeStyle.COMMENT_RE_ = /\\/\\*/;\n\n\n/**\n * Sanitize URLs inside url().\n *\n * NOTE: We could also consider using CSS.escape once that's available in the\n * browsers. However, loosely matching URL e.g. with url\\(.*\\) and then escaping\n * the contents would result in a slightly different language than CSS leading\n * to confusion of users. E.g. url(\")\") is valid in CSS but it would be invalid\n * as seen by our parser. On the other hand, url(\\) is invalid in CSS but our\n * parser would be fine with it.\n *\n * @param {string} value Untrusted CSS property value.\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizeUrl_ = function(value) {\n  'use strict';\n  return value.replace(\n      goog.html.SafeStyle.URL_RE_, function(match, before, url, after) {\n        'use strict';\n        var quote = '';\n        url = url.replace(/^(['\"])(.*)\\1$/, function(match, start, inside) {\n          'use strict';\n          quote = start;\n          return inside;\n        });\n        var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();\n        return before + quote + sanitized + quote + after;\n      });\n};\n\n\n/**\n * Creates a new SafeStyle object by concatenating the values.\n * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args\n *     SafeStyles to concatenate.\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.concat = function(var_args) {\n  'use strict';\n  var style = '';\n\n  /**\n   * @param {!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>} argument\n   */\n  var addArgument = function(argument) {\n    'use strict';\n    if (Array.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      style += goog.html.SafeStyle.unwrap(argument);\n    }\n  };\n\n  goog.array.forEach(arguments, addArgument);\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n","~:compiled-at",1623605884874,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.html.safestyle.js\",\n\"lineCount\":177,\n\"mappings\":\"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\",\n\"sources\":[\"goog/html/safestyle.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview The SafeStyle type and its builders.\\n *\\n * TODO(xtof): Link to document stating type contract.\\n */\\n\\ngoog.provide('goog.html.SafeStyle');\\n\\ngoog.require('goog.array');\\ngoog.require('goog.asserts');\\ngoog.require('goog.html.SafeUrl');\\ngoog.require('goog.string.Const');\\ngoog.require('goog.string.TypedString');\\ngoog.require('goog.string.internal');\\n\\n\\n\\n/**\\n * A string-like object which represents a sequence of CSS declarations\\n * (`propertyName1: propertyvalue1; propertyName2: propertyValue2; ...`)\\n * and that carries the security type contract that its value, as a string,\\n * will not cause untrusted script execution (XSS) when evaluated as CSS in a\\n * browser.\\n *\\n * Instances of this type must be created via the factory methods\\n * (`goog.html.SafeStyle.create` or `goog.html.SafeStyle.fromConstant`)\\n * and not by invoking its constructor. The constructor intentionally takes an\\n * extra parameter that cannot be constructed outside of this file and the type\\n * is immutable; hence only a default instance corresponding to the empty string\\n * can be obtained via constructor invocation.\\n *\\n * SafeStyle's string representation can safely be:\\n * <ul>\\n *   <li>Interpolated as the content of a *quoted* HTML style attribute.\\n *       However, the SafeStyle string *must be HTML-attribute-escaped* before\\n *       interpolation.\\n *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.\\n *       '<' characters in the SafeStyle string *must be CSS-escaped* before\\n *       interpolation. The SafeStyle string is also guaranteed not to be able\\n *       to introduce new properties or elide existing ones.\\n *   <li>Interpolated as the content of a {}-wrapped block within an HTML\\n *       &lt;style&gt; element. '<' characters in the SafeStyle string\\n *       *must be CSS-escaped* before interpolation.\\n *   <li>Assigned to the style property of a DOM node. The SafeStyle string\\n *       should not be escaped before being assigned to the property.\\n * </ul>\\n *\\n * A SafeStyle may never contain literal angle brackets. Otherwise, it could\\n * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't\\n * be HTML escaped). For example, if the SafeStyle containing\\n * `font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'` were\\n * interpolated within a &lt;style&gt; tag, this would then break out of the\\n * style context into HTML.\\n *\\n * A SafeStyle may contain literal single or double quotes, and as such the\\n * entire style string must be escaped when used in a style attribute (if\\n * this were not the case, the string could contain a matching quote that\\n * would escape from the style attribute).\\n *\\n * Values of this type must be composable, i.e. for any two values\\n * `style1` and `style2` of this type,\\n * `goog.html.SafeStyle.unwrap(style1) +\\n * goog.html.SafeStyle.unwrap(style2)` must itself be a value that satisfies\\n * the SafeStyle type constraint. This requirement implies that for any value\\n * `style` of this type, `goog.html.SafeStyle.unwrap(style)` must\\n * not end in a \\\"property value\\\" or \\\"property name\\\" context. For example,\\n * a value of `background:url(\\\"` or `font-` would not satisfy the\\n * SafeStyle contract. This is because concatenating such strings with a\\n * second value that itself does not contain unsafe CSS can result in an\\n * overall string that does. For example, if `javascript:evil())\\\"` is\\n * appended to `background:url(\\\"}, the resulting string may result in\\n * the execution of a malicious script.\\n *\\n * TODO(mlourenco): Consider whether we should implement UTF-8 interchange\\n * validity checks and blacklisting of newlines (including Unicode ones) and\\n * other whitespace characters (\\\\t, \\\\f). Document here if so and also update\\n * SafeStyle.fromConstant().\\n *\\n * The following example values comply with this type's contract:\\n * <ul>\\n *   <li><pre>width: 1em;</pre>\\n *   <li><pre>height:1em;</pre>\\n *   <li><pre>width: 1em;height: 1em;</pre>\\n *   <li><pre>background:url('http://url');</pre>\\n * </ul>\\n * In addition, the empty string is safe for use in a CSS attribute.\\n *\\n * The following example values do NOT comply with this type's contract:\\n * <ul>\\n *   <li><pre>background: red</pre> (missing a trailing semi-colon)\\n *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)\\n *   <li><pre>1em</pre> (missing an attribute name, which provides context for\\n *       the value)\\n * </ul>\\n *\\n * @see goog.html.SafeStyle#create\\n * @see goog.html.SafeStyle#fromConstant\\n * @see http://www.w3.org/TR/css3-syntax/\\n * @final\\n * @struct\\n * @implements {goog.string.TypedString}\\n */\\ngoog.html.SafeStyle = class {\\n  /**\\n   * @param {string} value\\n   * @param {!Object} token package-internal implementation detail.\\n   */\\n  constructor(value, token) {\\n    /**\\n     * The contained value of this SafeStyle.  The field has a purposely\\n     * ugly name to make (non-compiled) code that attempts to directly access\\n     * this field stand out.\\n     * @private {string}\\n     */\\n    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ =\\n        (token === goog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_) ? value : '';\\n  }\\n};\\n\\n\\n/**\\n * @override\\n * @const\\n */\\ngoog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;\\n\\n\\n/**\\n * Creates a SafeStyle object from a compile-time constant string.\\n *\\n * `style` should be in the format\\n * `name: value; [name: value; ...]` and must not have any < or >\\n * characters in it. This is so that SafeStyle's contract is preserved,\\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\\n * declarations and without affecting the syntactic structure of any\\n * surrounding CSS and HTML.\\n *\\n * This method performs basic sanity checks on the format of `style`\\n * but does not constrain the format of `name` and `value`, except\\n * for disallowing tag characters.\\n *\\n * @param {!goog.string.Const} style A compile-time-constant string from which\\n *     to create a SafeStyle.\\n * @return {!goog.html.SafeStyle} A SafeStyle object initialized to\\n *     `style`.\\n */\\ngoog.html.SafeStyle.fromConstant = function(style) {\\n  'use strict';\\n  var styleString = goog.string.Const.unwrap(style);\\n  if (styleString.length === 0) {\\n    return goog.html.SafeStyle.EMPTY;\\n  }\\n  goog.asserts.assert(\\n      goog.string.internal.endsWith(styleString, ';'),\\n      'Last character of style string is not \\\\';\\\\': ' + styleString);\\n  goog.asserts.assert(\\n      goog.string.internal.contains(styleString, ':'),\\n      'Style string must contain at least one \\\\':\\\\', to ' +\\n          'specify a \\\"name: value\\\" pair: ' + styleString);\\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\n      styleString);\\n};\\n\\n\\n/**\\n * Returns this SafeStyle's value as a string.\\n *\\n * IMPORTANT: In code where it is security relevant that an object's type is\\n * indeed `SafeStyle`, use `goog.html.SafeStyle.unwrap` instead of\\n * this method. If in doubt, assume that it's security relevant. In particular,\\n * note that goog.html functions which return a goog.html type do not guarantee\\n * the returned instance is of the right type. For example:\\n *\\n * <pre>\\n * var fakeSafeHtml = new String('fake');\\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\\n * // instanceof goog.html.SafeHtml.\\n * </pre>\\n *\\n * @see goog.html.SafeStyle#unwrap\\n * @override\\n */\\ngoog.html.SafeStyle.prototype.getTypedStringValue = function() {\\n  'use strict';\\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\\n};\\n\\n\\nif (goog.DEBUG) {\\n  /**\\n   * Returns a debug string-representation of this value.\\n   *\\n   * To obtain the actual string value wrapped in a SafeStyle, use\\n   * `goog.html.SafeStyle.unwrap`.\\n   *\\n   * @see goog.html.SafeStyle#unwrap\\n   * @override\\n   */\\n  goog.html.SafeStyle.prototype.toString = function() {\\n    'use strict';\\n    return 'SafeStyle{' + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ +\\n        '}';\\n  };\\n}\\n\\n\\n/**\\n * Performs a runtime check that the provided object is indeed a\\n * SafeStyle object, and returns its value.\\n *\\n * @param {!goog.html.SafeStyle} safeStyle The object to extract from.\\n * @return {string} The safeStyle object's contained string, unless\\n *     the run-time type check fails. In that case, `unwrap` returns an\\n *     innocuous string, or, if assertions are enabled, throws\\n *     `goog.asserts.AssertionError`.\\n */\\ngoog.html.SafeStyle.unwrap = function(safeStyle) {\\n  'use strict';\\n  // Perform additional Run-time type-checking to ensure that\\n  // safeStyle is indeed an instance of the expected type.  This\\n  // provides some additional protection against security bugs due to\\n  // application code that disables type checks.\\n  // Specifically, the following checks are performed:\\n  // 1. The object is an instance of the expected type.\\n  // 2. The object is not an instance of a subclass.\\n  if (safeStyle instanceof goog.html.SafeStyle &&\\n      safeStyle.constructor === goog.html.SafeStyle) {\\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\\n  } else {\\n    goog.asserts.fail(\\n        'expected object of type SafeStyle, got \\\\'' + safeStyle +\\n        '\\\\' of type ' + goog.typeOf(safeStyle));\\n    return 'type_error:SafeStyle';\\n  }\\n};\\n\\n\\n/**\\n * Token used to ensure that object is created only from this file. No code\\n * outside of this file can access this token.\\n * @private {!Object}\\n * @const\\n */\\ngoog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_ = {};\\n\\n\\n/**\\n * Package-internal utility method to create SafeStyle instances.\\n *\\n * @param {string} style The string to initialize the SafeStyle object with.\\n * @return {!goog.html.SafeStyle} The initialized SafeStyle object.\\n * @package\\n */\\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(\\n    style) {\\n  'use strict';\\n  return new goog.html.SafeStyle(\\n      style, goog.html.SafeStyle.CONSTRUCTOR_TOKEN_PRIVATE_);\\n};\\n\\n\\n/**\\n * A SafeStyle instance corresponding to the empty string.\\n * @const {!goog.html.SafeStyle}\\n */\\ngoog.html.SafeStyle.EMPTY =\\n    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');\\n\\n\\n/**\\n * The innocuous string generated by goog.html.SafeStyle.create when passed\\n * an unsafe value.\\n * @const {string}\\n */\\ngoog.html.SafeStyle.INNOCUOUS_STRING = 'zClosurez';\\n\\n\\n/**\\n * A single property value.\\n * @typedef {string|!goog.string.Const|!goog.html.SafeUrl}\\n */\\ngoog.html.SafeStyle.PropertyValue;\\n\\n\\n/**\\n * Mapping of property names to their values.\\n * We don't support numbers even though some values might be numbers (e.g.\\n * line-height or 0 for any length). The reason is that most numeric values need\\n * units (e.g. '1px') and allowing numbers could cause users forgetting about\\n * them.\\n * @typedef {!Object<string, ?goog.html.SafeStyle.PropertyValue|\\n *     ?Array<!goog.html.SafeStyle.PropertyValue>>}\\n */\\ngoog.html.SafeStyle.PropertyMap;\\n\\n\\n/**\\n * Creates a new SafeStyle object from the properties specified in the map.\\n * @param {!goog.html.SafeStyle.PropertyMap} map Mapping of property names to\\n *     their values, for example {'margin': '1px'}. Names must consist of\\n *     [-_a-zA-Z0-9]. Values might be strings consisting of\\n *     [-,.'\\\"%_!# a-zA-Z0-9[\\\\]], where \\\", ', and [] must be properly balanced.\\n *     We also allow simple functions like rgb() and url() which sanitizes its\\n *     contents. Other values must be wrapped in goog.string.Const. URLs might\\n *     be passed as goog.html.SafeUrl which will be wrapped into url(\\\"\\\"). We\\n *     also support array whose elements are joined with ' '. Null value causes\\n *     skipping the property.\\n * @return {!goog.html.SafeStyle}\\n * @throws {!Error} If invalid name is provided.\\n * @throws {!goog.asserts.AssertionError} If invalid value is provided. With\\n *     disabled assertions, invalid value is replaced by\\n *     goog.html.SafeStyle.INNOCUOUS_STRING.\\n */\\ngoog.html.SafeStyle.create = function(map) {\\n  'use strict';\\n  var style = '';\\n  for (var name in map) {\\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\\n    if (Object.prototype.hasOwnProperty.call(map, name)) {\\n      if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\\n        throw new Error('Name allows only [-_a-zA-Z0-9], got: ' + name);\\n      }\\n      var value = map[name];\\n      if (value == null) {\\n        continue;\\n      }\\n      if (Array.isArray(value)) {\\n        value =\\n            goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_)\\n                .join(' ');\\n      } else {\\n        value = goog.html.SafeStyle.sanitizePropertyValue_(value);\\n      }\\n      style += name + ':' + value + ';';\\n    }\\n  }\\n  if (!style) {\\n    return goog.html.SafeStyle.EMPTY;\\n  }\\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\n      style);\\n};\\n\\n\\n/**\\n * Checks and converts value to string.\\n * @param {!goog.html.SafeStyle.PropertyValue} value\\n * @return {string}\\n * @private\\n */\\ngoog.html.SafeStyle.sanitizePropertyValue_ = function(value) {\\n  'use strict';\\n  if (value instanceof goog.html.SafeUrl) {\\n    var url = goog.html.SafeUrl.unwrap(value);\\n    return 'url(\\\"' + url.replace(/</g, '%3c').replace(/[\\\\\\\\\\\"]/g, '\\\\\\\\$&') + '\\\")';\\n  }\\n  var result = value instanceof goog.string.Const ?\\n      goog.string.Const.unwrap(value) :\\n      goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\\n  // These characters can be used to change context and we don't want that even\\n  // with const values.\\n  if (/[{;}]/.test(result)) {\\n    throw new goog.asserts.AssertionError(\\n        'Value does not allow [{;}], got: %s.', [result]);\\n  }\\n  return result;\\n};\\n\\n\\n/**\\n * Checks string value.\\n * @param {string} value\\n * @return {string}\\n * @private\\n */\\ngoog.html.SafeStyle.sanitizePropertyValueString_ = function(value) {\\n  'use strict';\\n  // Some CSS property values permit nested functions. We allow one level of\\n  // nesting, and all nested functions must also be in the FUNCTIONS_RE_ list.\\n  var valueWithoutFunctions =\\n      value.replace(goog.html.SafeStyle.FUNCTIONS_RE_, '$1')\\n          .replace(goog.html.SafeStyle.FUNCTIONS_RE_, '$1')\\n          .replace(goog.html.SafeStyle.URL_RE_, 'url');\\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\\n    goog.asserts.fail(\\n        'String value allows only ' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ +\\n        ' and simple functions, got: ' + value);\\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\\n  } else if (goog.html.SafeStyle.COMMENT_RE_.test(value)) {\\n    goog.asserts.fail('String value disallows comments, got: ' + value);\\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\\n  } else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\\n    goog.asserts.fail('String value requires balanced quotes, got: ' + value);\\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\\n  } else if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(value)) {\\n    goog.asserts.fail(\\n        'String value requires balanced square brackets and one' +\\n        ' identifier per pair of brackets, got: ' + value);\\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\\n  }\\n  return goog.html.SafeStyle.sanitizeUrl_(value);\\n};\\n\\n\\n/**\\n * Checks that quotes (\\\" and ') are properly balanced inside a string. Assumes\\n * that neither escape (\\\\) nor any other character that could result in\\n * breaking out of a string parsing context are allowed;\\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\\n * @param {string} value Untrusted CSS property value.\\n * @return {boolean} True if property value is safe with respect to quote\\n *     balancedness.\\n * @private\\n */\\ngoog.html.SafeStyle.hasBalancedQuotes_ = function(value) {\\n  'use strict';\\n  var outsideSingle = true;\\n  var outsideDouble = true;\\n  for (var i = 0; i < value.length; i++) {\\n    var c = value.charAt(i);\\n    if (c == '\\\\'' && outsideDouble) {\\n      outsideSingle = !outsideSingle;\\n    } else if (c == '\\\"' && outsideSingle) {\\n      outsideDouble = !outsideDouble;\\n    }\\n  }\\n  return outsideSingle && outsideDouble;\\n};\\n\\n\\n/**\\n * Checks that square brackets ([ and ]) are properly balanced inside a string,\\n * and that the content in the square brackets is one ident-token;\\n * see https://www.w3.org/TR/css-syntax-3/#ident-token-diagram.\\n * For practicality, and in line with other restrictions posed on SafeStyle\\n * strings, we restrict the character set allowable in the ident-token to\\n * [-_a-zA-Z0-9].\\n * @param {string} value Untrusted CSS property value.\\n * @return {boolean} True if property value is safe with respect to square\\n *     bracket balancedness.\\n * @private\\n */\\ngoog.html.SafeStyle.hasBalancedSquareBrackets_ = function(value) {\\n  'use strict';\\n  var outside = true;\\n  var tokenRe = /^[-_a-zA-Z0-9]$/;\\n  for (var i = 0; i < value.length; i++) {\\n    var c = value.charAt(i);\\n    if (c == ']') {\\n      if (outside) return false;  // Unbalanced ].\\n      outside = true;\\n    } else if (c == '[') {\\n      if (!outside) return false;  // No nesting.\\n      outside = false;\\n    } else if (!outside && !tokenRe.test(c)) {\\n      return false;\\n    }\\n  }\\n  return outside;\\n};\\n\\n\\n/**\\n * Characters allowed in goog.html.SafeStyle.VALUE_RE_.\\n * @private {string}\\n */\\ngoog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = '[-,.\\\"\\\\'%_!# a-zA-Z0-9\\\\\\\\[\\\\\\\\]]';\\n\\n\\n/**\\n * Regular expression for safe values.\\n *\\n * Quotes (\\\" and ') are allowed, but a check must be done elsewhere to ensure\\n * they're balanced.\\n *\\n * Square brackets ([ and ]) are allowed, but a check must be done elsewhere\\n * to ensure they're balanced. The content inside a pair of square brackets must\\n * be one alphanumeric identifier.\\n *\\n * ',' allows multiple values to be assigned to the same property\\n * (e.g. background-attachment or font-family) and hence could allow\\n * multiple values to get injected, but that should pose no risk of XSS.\\n *\\n * The expression checks only for XSS safety, not for CSS validity.\\n * @const {!RegExp}\\n * @private\\n */\\ngoog.html.SafeStyle.VALUE_RE_ =\\n    new RegExp('^' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + '+$');\\n\\n\\n/**\\n * Regular expression for url(). We support URLs allowed by\\n * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape\\n * sequences. Use percent-encoding if you need to use special characters like\\n * backslash.\\n * @private @const {!RegExp}\\n */\\ngoog.html.SafeStyle.URL_RE_ = new RegExp(\\n    '\\\\\\\\b(url\\\\\\\\([ \\\\t\\\\n]*)(' +\\n        '\\\\'[ -&(-\\\\\\\\[\\\\\\\\]-~]*\\\\'' +  // Printable characters except ' and \\\\.\\n        '|\\\"[ !#-\\\\\\\\[\\\\\\\\]-~]*\\\"' +    // Printable characters except \\\" and \\\\.\\n        '|[!#-&*-\\\\\\\\[\\\\\\\\]-~]*' +    // Printable characters except [ \\\"'()\\\\\\\\].\\n        ')([ \\\\t\\\\n]*\\\\\\\\))',\\n    'g');\\n\\n/**\\n * Names of functions allowed in FUNCTIONS_RE_.\\n * @private @const {!Array<string>}\\n */\\ngoog.html.SafeStyle.ALLOWED_FUNCTIONS_ = [\\n  'calc',\\n  'cubic-bezier',\\n  'fit-content',\\n  'hsl',\\n  'hsla',\\n  'linear-gradient',\\n  'matrix',\\n  'minmax',\\n  'repeat',\\n  'rgb',\\n  'rgba',\\n  '(rotate|scale|translate)(X|Y|Z|3d)?',\\n];\\n\\n\\n/**\\n * Regular expression for simple functions.\\n * @private @const {!RegExp}\\n */\\ngoog.html.SafeStyle.FUNCTIONS_RE_ = new RegExp(\\n    '\\\\\\\\b(' + goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join('|') + ')' +\\n        '\\\\\\\\([-+*/0-9a-z.%\\\\\\\\[\\\\\\\\], ]+\\\\\\\\)',\\n    'g');\\n\\n\\n/**\\n * Regular expression for comments. These are disallowed in CSS property values.\\n * @private @const {!RegExp}\\n */\\ngoog.html.SafeStyle.COMMENT_RE_ = /\\\\/\\\\*/;\\n\\n\\n/**\\n * Sanitize URLs inside url().\\n *\\n * NOTE: We could also consider using CSS.escape once that's available in the\\n * browsers. However, loosely matching URL e.g. with url\\\\(.*\\\\) and then escaping\\n * the contents would result in a slightly different language than CSS leading\\n * to confusion of users. E.g. url(\\\")\\\") is valid in CSS but it would be invalid\\n * as seen by our parser. On the other hand, url(\\\\) is invalid in CSS but our\\n * parser would be fine with it.\\n *\\n * @param {string} value Untrusted CSS property value.\\n * @return {string}\\n * @private\\n */\\ngoog.html.SafeStyle.sanitizeUrl_ = function(value) {\\n  'use strict';\\n  return value.replace(\\n      goog.html.SafeStyle.URL_RE_, function(match, before, url, after) {\\n        'use strict';\\n        var quote = '';\\n        url = url.replace(/^(['\\\"])(.*)\\\\1$/, function(match, start, inside) {\\n          'use strict';\\n          quote = start;\\n          return inside;\\n        });\\n        var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();\\n        return before + quote + sanitized + quote + after;\\n      });\\n};\\n\\n\\n/**\\n * Creates a new SafeStyle object by concatenating the values.\\n * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args\\n *     SafeStyles to concatenate.\\n * @return {!goog.html.SafeStyle}\\n */\\ngoog.html.SafeStyle.concat = function(var_args) {\\n  'use strict';\\n  var style = '';\\n\\n  /**\\n   * @param {!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>} argument\\n   */\\n  var addArgument = function(argument) {\\n    'use strict';\\n    if (Array.isArray(argument)) {\\n      goog.array.forEach(argument, addArgument);\\n    } else {\\n      style += goog.html.SafeStyle.unwrap(argument);\\n    }\\n  };\\n\\n  goog.array.forEach(arguments, addArgument);\\n  if (!style) {\\n    return goog.html.SafeStyle.EMPTY;\\n  }\\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\n      style);\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"html\",\"SafeStyle\",\"constructor\",\"value\",\"token\",\"privateDoNotAccessOrElseSafeStyleWrappedValue_\",\"CONSTRUCTOR_TOKEN_PRIVATE_\",\"prototype\",\"implementsGoogStringTypedString\",\"fromConstant\",\"goog.html.SafeStyle.fromConstant\",\"style\",\"styleString\",\"string\",\"Const\",\"unwrap\",\"length\",\"EMPTY\",\"asserts\",\"assert\",\"internal\",\"endsWith\",\"contains\",\"createSafeStyleSecurityPrivateDoNotAccessOrElse\",\"getTypedStringValue\",\"goog.html.SafeStyle.prototype.getTypedStringValue\",\"DEBUG\",\"toString\",\"goog.html.SafeStyle.prototype.toString\",\"goog.html.SafeStyle.unwrap\",\"safeStyle\",\"fail\",\"typeOf\",\"goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse\",\"INNOCUOUS_STRING\",\"PropertyValue\",\"PropertyMap\",\"create\",\"goog.html.SafeStyle.create\",\"map\",\"name\",\"Object\",\"hasOwnProperty\",\"call\",\"test\",\"Error\",\"Array\",\"isArray\",\"array\",\"sanitizePropertyValue_\",\"join\",\"goog.html.SafeStyle.sanitizePropertyValue_\",\"SafeUrl\",\"url\",\"replace\",\"result\",\"sanitizePropertyValueString_\",\"String\",\"AssertionError\",\"goog.html.SafeStyle.sanitizePropertyValueString_\",\"valueWithoutFunctions\",\"FUNCTIONS_RE_\",\"URL_RE_\",\"VALUE_RE_\",\"VALUE_ALLOWED_CHARS_\",\"COMMENT_RE_\",\"hasBalancedQuotes_\",\"hasBalancedSquareBrackets_\",\"sanitizeUrl_\",\"goog.html.SafeStyle.hasBalancedQuotes_\",\"outsideSingle\",\"outsideDouble\",\"i\",\"c\",\"charAt\",\"goog.html.SafeStyle.hasBalancedSquareBrackets_\",\"outside\",\"tokenRe\",\"RegExp\",\"ALLOWED_FUNCTIONS_\",\"goog.html.SafeStyle.sanitizeUrl_\",\"match\",\"before\",\"after\",\"quote\",\"start\",\"inside\",\"sanitized\",\"sanitize\",\"concat\",\"goog.html.SafeStyle.concat\",\"var_args\",\"addArgument\",\"argument\",\"forEach\",\"arguments\"]\n}\n"]